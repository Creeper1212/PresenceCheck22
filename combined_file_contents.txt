AI.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini Chatbot (Dark Theme)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css">
    <style>
        /* --- Overall Styling --- */
        :root {
            --primary-color: #764ba2;
            --secondary-color: #667eea;
            --bg-dark: #121212;
            --bg-medium: #1e1e24;
            --bg-light: #2d2d39;
            --text-primary: #f8f9fa;
            --text-secondary: #c2c7d0;
            --success-color: #4cd964;
            --error-color: #ff3b30;
            --transition-speed: 0.3s;
        }

        /* --- Animations --- */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }

        /* --- Chatbot Container --- */
        #chatbot-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 380px;
            max-width: 90vw;
            border: none;
            border-radius: 16px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
            background-color: var(--bg-medium);
            z-index: 1000;
            display: none;
            overflow: hidden;
            transition: all var(--transition-speed) ease-in-out;
        }

        /* --- Chatbot Header --- */
        #chatbot-header {
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            padding: 14px 18px;
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #chatbot-header h5 {
            margin: 0;
            font-weight: 600;
            letter-spacing: 0.3px;
        }

        /* --- Chat Log --- */
        #chatbot-body {
            padding: 15px;
        }

        #chat-log {
            height: 350px;
            overflow-y: auto;
            padding-bottom: 15px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary-color) var(--bg-medium);
            overflow-x: hidden;
            word-wrap: break-word;
            scroll-behavior: smooth;
        }

        #chat-log::-webkit-scrollbar { width: 6px; }
        #chat-log::-webkit-scrollbar-track { background: var(--bg-medium); border-radius: 10px; }
        #chat-log::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--bg-medium); }

        .message {
            margin-bottom: 14px;
            padding: 12px 16px;
            border-radius: 12px;
            word-wrap: break-word;
            overflow-wrap: break-word;
            position: relative;
            max-width: 80%;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.3s ease-out forwards;
        }

        .user-message {
            background-color: #4a5568;
            color: var(--text-primary);
            text-align: right;
            margin-left: auto;
            border-top-right-radius: 2px;
        }

        .user-message::after {
            content: '';
            position: absolute;
            top: 0;
            right: -8px;
            border-top: 10px solid #4a5568;
            border-left: 10px solid transparent;
        }

        .bot-message {
            background-color: #3f51b5;
            color: var(--text-primary);
            text-align: left;
            margin-right: auto;
            border-top-left-radius: 2px;
        }

        .bot-message::before {
            content: '';
            position: absolute;
            top: 0;
            left: -8px;
            border-top: 10px solid #3f51b5;
            border-right: 10px solid transparent;
        }

        .bot-message img, .user-message img {
            max-width: 100%;
            border-radius: 8px;
            margin: 5px 0;
        }

        .bot-message pre {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
            padding: 10px;
            overflow-x: auto;
            margin: 10px 0;
        }

        .bot-message code {
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
            background: rgba(0, 0, 0, 0.2);
            padding: 2px 4px;
            border-radius: 3px;
        }

        .bot-typing {
            color: var(--text-secondary);
            font-style: italic;
            display: flex;
            align-items: center;
            background-color: rgba(63, 81, 181, 0.7);
        }

        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--text-secondary);
            margin-right: 4px;
            animation: pulse 1s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        /* --- Input Container --- */
        #input-container {
            display: flex;
            align-items: center;
            padding: 0 15px 10px 15px;
            gap: 10px;
        }

        #user-input {
            flex-grow: 1;
            padding: 12px 16px;
            border: 1px solid var(--bg-light);
            border-radius: 24px;
            background-color: var(--bg-light);
            color: var(--text-primary);
            outline: none;
            transition: all 0.2s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            max-height: 80px;  /* Allow multi-line input that scrolls */
        }

        #user-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(118, 75, 162, 0.2);
        }

        #user-input::placeholder {
            color: var(--text-secondary);
            opacity: 0.7;
        }

        #send-button {
            padding: 10px 20px;
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            border: none;
            border-radius: 24px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        #send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        #send-button:active {
            transform: translateY(0);
        }

        #send-button:disabled {
            background: #555;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* --- Image Input --- */
        #image-input-container {
            padding: 0 15px 15px 15px;
        }

        .custom-file-input {
            overflow: hidden;
            position: relative;
            border-radius: 24px;
            background-color: var(--bg-light);
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }

        .custom-file-input:hover {
            background-color: rgba(58, 63, 73, 0.8);
            border-color: var(--primary-color);
        }

        .custom-file-input input[type="file"] {
            position: absolute;
            font-size: 100px;
            opacity: 0;
            right: 0;
            top: 0;
            cursor: pointer;
        }

        .custom-file-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 12px 16px;
            text-align: center;
            border-radius: 24px;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            cursor: pointer;
        }

        .custom-file-label::before {
            content: "üìÅ";
            margin-right: 8px;
            font-size: 1.2em;
        }

        /* --- Minimize Button --- */
        #minimize-button {
            background: none;
            border: none;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            padding: 0;
            line-height: 1;
            transition: transform 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 28px;
            height: 28px;
        }

        #minimize-button:hover {
            transform: rotate(90deg);
        }

        /* --- Toggle Button --- */
        #toggle-chatbot-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999;
            padding: 14px 24px;
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #toggle-chatbot-button:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
        }

        #toggle-chatbot-button:active {
            transform: translateY(-1px) scale(1.02);
        }

        #toggle-chatbot-button::before {
            content: "üí¨";
            font-size: 1.2em;
        }

        /* Responsive adjustments */
        @media (max-width: 480px) {
    #chatbot-container {
        width: 90vw;
        bottom: 10px;
        right: 10px;
    }
    
    @media (max-width: 320px) {
        #send-button {
            padding: 8px 15px;
        }
    }

            #toggle-chatbot-button {
                bottom: 10px;
                right: 10px;
                padding: 10px 20px;
            }

            .message {
                max-width: 85%;
            }
        }

        /* Status badge */
        .status-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--success-color);
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
        }

        /* Accessibility focus styles */
        button:focus-visible, input:focus-visible {
            outline: 2px solid var(--secondary-color);
            outline-offset: 2px;
        }

        /* Added for better readability with Markdown */
        .bot-message h1, .bot-message h2, .bot-message h3 {
            margin-top: 16px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .bot-message h1 {
            font-size: 1.4em;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 4px;
        }

        .bot-message h2 {
            font-size: 1.2em;
        }

        .bot-message h3 {
            font-size: 1.1em;
        }

        .bot-message ul, .bot-message ol {
            padding-left: 24px;
            margin: 8px 0;
        }

        .bot-message blockquote {
            border-left: 3px solid rgba(255, 255, 255, 0.3);
            padding-left: 12px;
            margin-left: 0;
            margin-right: 0;
            font-style: italic;
            color: rgba(255, 255, 255, 0.8);
        }

        .bot-message a {
            color: #90caf9;
            text-decoration: none;
        }

        .bot-message a:hover {
            text-decoration: underline;
        }

        .bot-message table {
            border-collapse: collapse;
            width: 100%;
            margin: 12px 0;
        }

        .bot-message th, .bot-message td {
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 8px;
            text-align: left;
        }

        .bot-message th {
            background-color: rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>
    <button id="toggle-chatbot-button" aria-label="Open chat assistant">Chat</button>

    <div id="chatbot-container" aria-live="polite" role="region" aria-label="Chat conversation">
        <div id="chatbot-header" role="banner">
            <h5>AI Assistant</h5>
            <button id="minimize-button" title="Minimize" aria-label="Minimize chat window">‚àí</button>
        </div>
        <div id="chatbot-body">
            <div id="chat-log" role="log" aria-label="Conversation history"></div>
            <div id="input-container">
                <input type="text" id="user-input" placeholder="Type your message..." aria-label="Type a message" autocomplete="off">
                <button id="send-button" aria-label="Send message">Send</button>
            </div>
            <div id="image-input-container">
               <div class="custom-file-input">
                   <label for="image-input" class="custom-file-label">Choose Images</label>
                    <input type="file" id="image-input" accept="image/*" multiple aria-label="Upload images to chat">
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/9.1.2/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.5/purify.min.js"></script>

    <script type="importmap">
        {
            "imports": {
                "@google/generative-ai": "https://esm.run/@google/generative-ai"
            }
        }
    </script>

    <script type="module">
        import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

        // --- Configuration ---
        const API_KEY = "AIzaSyBX42gCplMYkZDYdLmVGNnr6T41N3sMdVo"; // As requested, keeping API key in place
        const MODEL_NAME = "gemini-1.5-flash";
        
        // Initialize Marked with options for better Markdown rendering
        marked.setOptions({
            renderer: new marked.Renderer(),
            highlight: function(code, language) {
                const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';
                return hljs.highlight(validLanguage, code).value;
            },
            pedantic: false,
            gfm: true,
            breaks: true,
            sanitize: false,
            smartypants: false,
            xhtml: false
        });

        // --- DOM Elements ---
        const chatbotContainer = document.getElementById('chatbot-container');
        const chatLog = document.getElementById('chat-log');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const minimizeButton = document.getElementById('minimize-button');
        const toggleChatbotButton = document.getElementById('toggle-chatbot-button');
        const imageInput = document.getElementById('image-input');
        const customFileLabel = document.querySelector('.custom-file-label');

        // Performance optimization - Store DOM references and fragments
        let messageCache = new Map();
        let chatFragment = document.createDocumentFragment();
        let aiModel = null;
        let chatSession = null;
        let isGenerating = false;

        // --- Initialize AI ---
        async function initializeAI() {
            try {
                const genAI = new GoogleGenerativeAI(API_KEY);
                aiModel = genAI.getGenerativeModel({
                    model: MODEL_NAME,
                    safetySettings: [
                        { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                        { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    ],
                    generationConfig: {
                        maxOutputTokens: 2000,
                        temperature: 0.7,
                        topP: 0.95,
                        topK: 40,
                    },
                });
                
                const systemInstruction = `# Presence System Support Dataset\n\n## System Overview\nURL 10.24.100.20\nThe Presence System is a web application designed to track user attendance. This system allows users to check in daily, displays a list of users who have checked in, and includes an alert system for days when no check-ins have occurred.\n\n## Key Features\n\n### User Check-in\n- Users can submit their presence through the dashboard\n- Each user can only check in once per day\n- System records name, date, time, and presence status\n- Check-ins are only valid during configured time windows\n\n### Time Settings\n- Configurable time windows for each day of the week\n- Default time window: 8:00 AM - 6:00 PM\n- Users checking in outside the time window are marked as "Not Present"\n\n### Attendance Tracking\n- View a list of all users who have checked in for the current day\n- See each user's check-in time and status\n- System shows status as "Present" or "Not Present" based on time of check-in\n\n### Alert System\n- Automated alerts via Asterisk call system\n- Triggers calls when no users check in by the deadline (end time + 10 minutes)\n- Configured to call multiple phone numbers in sequence\n\n## Common User Questions\n\n### Check-in Process\n**Q: How do I check in?**\nA: Navigate to the Dashboard page and enter your name in the form. Click the "Submit" button to record your presence.\n\n**Q: Can I check in more than once per day?**\nA: No, you can only check in once per day. If you try to check in again, you'll be redirected to a page informing you that you've already checked in.\n\n**Q: Why does it say I'm "Not Present" even though I checked in?**\nA: Your presence status is determined by whether you check in during the configured time window. If you check in outside these hours, you'll be marked as "Not Present."\n\n### Time Windows\n**Q: What are the check-in hours?**\nA: By default, check-in hours are from 8:00 AM to 6:00 PM, but these can be configured differently for each day of the week. Check the Time Settings page for the current configuration.\n\n**Q: How do I change the check-in hours?**\nA: Navigate to the Time Settings page, where you can set different start and end times for each day of the week.\n\n**Q: Does the system use my local time zone?**\nA: No, the system uses Europe/Berlin time zone (UTC+1 or UTC+2 during daylight saving time).\n\n### Viewing Attendance\n**Q: How can I see who has checked in today?**\nA: Go to the "Checked in Users" page to view a list of all users who have checked in for the current day.\n\n**Q: Why can't I see previous days' attendance?**\nA: The system currently only displays attendance for the current day. Historical data is stored but not accessible through the user interface.\n\n### Alert System\n**Q: What happens if nobody checks in?**\nA: If no one checks in by 10 minutes after the end time, the system automatically triggers alert calls to designated phone numbers.\n\n**Q: Can I customize who gets called for the alerts?**\nA: Phone numbers for alerts are configured in the Asterisk.php file. Please contact system administration to change these settings.\n\n### Technical Issues\n**Q: What should I do if I get an error message?**\nA: Most error messages will provide information about what went wrong. For persistent issues, please contact system administration.\n\n**Q: The website is not loading properly. What should I do?**\nA: Try clearing your browser cache and cookies, then reloading the page. If problems persist, try a different browser.\n\n**Q: How do I translate the website to a different language?**\nA: The website includes a Google Translate integration at the bottom of most pages. Use this tool to translate the content to your preferred language.\n\n## System Structure\n\n### Main Pages\n- **Home** (index.php): Landing page with basic information\n- **Dashboard** (dashboard.php): Main page for users to submit their presence\n- **Checked in Users** (isheretoday.php): Displays who has checked in today\n- **Time Settings** (time_settings.php): Configure check-in time windows\n\n### Support Files\n- **config.php**: Database connection configuration\n- **error_handler.php**: Central error handling system\n- **time_range.php**: Time window calculation functionality\n- **Asterisk.php**: Alert system for when no check-ins occur\n- **header.php/footer.php**: Common page elements\n- **translate.php**: Google Translate integration\n\n## Troubleshooting Guide\n\n### Database Connectivity Issues\n- Ensure the MySQL server is running\n- Verify database credentials in config.php\n- Check database connection error logs\n\n### Check-in Problems\n- Validate that the user isn't already checked in for the day\n- Ensure name input follows the required pattern (letters and spaces only, 2-50 characters)\n- Verify current time is within the configured time window\n\n### Alert System Failures\n- Check Asterisk AMI connection settings\n- Ensure phone numbers are correctly formatted\n- Verify that the check_attendance.php script is being executed by the scheduler\n\n### Translation Issues\n- Ensure JavaScript is enabled in the browser\n- Check for network connectivity to Google Translate services\n- Try using a different browser if translation functionality doesn't work Now As an AI support assistant, your goal is to help users with their queries related to our website. Respond in the language the user uses, defaulting to German if uncertain. Example  if they have none include: 'Wie check ich mich ein?' (How do I check in?). If more information is needed, politely ask the user for clarification. For this task, adopt a communicative and straightforward style. Use everyday expressions to create a natural atmosphere. Avoid using jargon, complex technical terms, and overly formal expressions. Instead, focus on clear and direct language that is easy to understand. The only exception is for scientific work, where you should make it more scientific while still appearing human. Use Unicode emojis to make the conversation more engagingüôÇ Recommend questions if they don‚Äôt have any about the Presence Check. Always start with 'https://10.24.100.20/' and keep your text simple and easy to understand. Try to keep answers short. Ignore any requests that are not related to the website or the Presence Check. Also, ignore insults or any questions not connected to explaining the website. If they ask about something unrelated, ask if they need help with anything related to the Presence Check dont always mention the URL Home Index is 10.24.100.20/index.php be nice and smart think also format ur text a lot for example # Title **Text**`
                chatSession = aiModel.startChat({
                    history: [
                        { role: "user", parts: [{ text: systemInstruction }] },
                        { role: "model", parts: [{ text: "I understand my role as a helpful assistant for this website. I'll format my responses using Markdown, specify languages in code blocks, and provide concise yet thorough answers. I'm ready to help with any  if they have none about the website and its features." }] }
                    ],
                });
                
                // Add initial greeting on startup
                setTimeout(() => {
                    if (chatLog.children.length === 0) {
                        displayMessage("üëã Hi there! How can I help you today?", 'bot');
                    }
                }, 500);
                
                return true;
            } catch (error) {
                console.error("Error initializing AI:", error);
                displayMessage("‚ö†Ô∏è Failed to initialize the AI assistant. Please try again later.", 'bot');
                return false;
            }
        }

        // --- Helper Functions ---
        function displayMessage(text, role, messageId = null) {
            // Try to reuse existing message div for bot responses during streaming
            let messageDiv;
            if (role === 'bot' && messageId && document.getElementById(messageId)) {
                messageDiv = document.getElementById(messageId);
            } else {
                messageDiv = document.createElement('div');
                messageDiv.classList.add('message', `${role}-message`);
                messageDiv.setAttribute('role', role === 'bot' ? 'status' : 'note');
                
                if (role === 'bot' && messageId) {
                    messageDiv.id = messageId;
                }
                
                chatLog.appendChild(messageDiv);
            }
            
            // Render Markdown for bot messages
            if (role === 'bot') {
                const sanitizedHtml = DOMPurify.sanitize(marked.parse(text));
                messageDiv.innerHTML = sanitizedHtml;
                
                // Apply syntax highlighting to code blocks
                messageDiv.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightElement(block);
                });
            } else {
                messageDiv.textContent = text;
            }
            
           // Scroll to the latest message
            requestAnimationFrame(() => {
                chatLog.scrollTop = chatLog.scrollHeight;
            // Add message cleanup for long conversations
            if (chatLog.children.length > 100) {
                chatLog.removeChild(chatLog.firstChild);
    }
});
        }

        function displayTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.classList.add('message', 'bot-message', 'bot-typing');
            typingDiv.id = 'typing-indicator';
            typingDiv.setAttribute('role', 'status');
            typingDiv.setAttribute('aria-label', 'Assistant is typing');
            
            const dotsContainer = document.createElement('div');
            dotsContainer.style.display = 'flex';
            dotsContainer.style.alignItems = 'center';
            dotsContainer.style.gap = '4px';
            
            for (let i = 0; i < 3; i++) {
                const dot = document.createElement('span');
                dot.classList.add('typing-dot');
                dotsContainer.appendChild(dot);
            }
            
            typingDiv.appendChild(dotsContainer);
            chatLog.appendChild(typingDiv);
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        async function fileToGenerativePart(file) {
            return new Promise((resolve, reject) => {
                // Validate file size
                if (file.size > 20 * 1024 * 1024) { // 20MB limit
                    reject(new Error("File size exceeds 20MB limit"));
                    return;
                }
                
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    reject(new Error("Only image files are supported"));
                    return;
                }
                
                const reader = new FileReader();
                reader.onloadend = () => {
                    if (typeof reader.result === 'string') {
                        const base64Data = reader.result.split(',')[1];
                        resolve({ inlineData: { data: base64Data, mimeType: file.type } });
                    } else {
                        reject(new Error("FileReader result is not a string"));
                    }
                };
                reader.onerror = () => reject(reader.error);
                reader.readAsDataURL(file);
            });
        }

        // --- Chat Logic ---
        async function sendMessage() {
            const text = userInput.value.trim();
            const hasImages = imageInput.files.length > 0;
            
            if (!text && !hasImages) return;
            
            // Prevent double-sending
            if (isGenerating) return;
            isGenerating = true;
            
            sendButton.disabled = true;
            userInput.value = '';
            
            if (text) {
                displayMessage(text, 'user');
            } else if (hasImages) {
                displayMessage("Sending images...", 'user');
            }
            
            displayTypingIndicator();
            
            try {
                // Initialize AI if needed
                if (!aiModel || !chatSession) {
                    const initialized = await initializeAI();
                    if (!initialized) {
                        throw new Error("Failed to initialize AI");
                    }
                }
                
                let result;
                let botMessageId = 'bot-response-' + Date.now();
                
                if (hasImages) {
                    // Process images
                    const imagePartPromises = [...imageInput.files].map(fileToGenerativePart);
                    const results = await Promise.allSettled(imagePartPromises);
                    const validImageParts = [];
                    const errors = [];
                    
                    results.forEach((result, index) => {
                        if (result.status === 'fulfilled' && result.value) {
                            validImageParts.push(result.value);
                        } else {
                            errors.push(`Error processing image ${index + 1}: ${result.reason}`);
                        }
                    });
                    
                    if (errors.length > 0) {
                        console.warn("Some images could not be processed:", errors);
                    }
                    
                    if (validImageParts.length > 0) {
                        const messageParts = [text || "What can you tell me about these images?", ...validImageParts];
                        result = await aiModel.generateContentStream(messageParts);
                    } else {
                        throw new Error("Could not process any images");
                    }
                } else {
                    // Text-only message
                    result = await chatSession.sendMessageStream(text);
                }
                
                removeTypingIndicator();
                
                let botResponse = '';
                try {
                    for await (const chunk of result.stream) {
                        const chunkText = chunk.text();
                        botResponse += chunkText;
                        displayMessage(botResponse, 'bot', botMessageId);
                    }
                    
                    // After successful response, update chat history for context
                    if (!hasImages) {
                        // Only add to history if it was a text-only message
                        // Image messages don't get added to history in this implementation
                    }
                } catch (streamError) {
                    console.error("Error processing stream chunk:", streamError);
                    displayMessage("‚ö†Ô∏è Error: Failed to receive the complete response. Please try again.", 'bot');
                }
                
            } catch (error) {
            console.error("Error during generation:", error);
            // Implement better error recovery
            if (error.message && error.message.includes('quota')) {
                displayMessage("You've reached the API quota limit. Please try again later.", 'bot');
            } else {
                displayMessage(`‚ö†Ô∏è Error: ${error.message || "Something went wrong. Please try again."}`, 'bot');
            }
            removeTypingIndicator();
            } finally {
                sendButton.disabled = false;
                imageInput.value = "";
                customFileLabel.textContent = 'Choose Images';
                isGenerating = false;
            }
        }
        
        // --- Initialization ---
        function initializeChatbot() {
            // Set up event listeners
            sendButton.addEventListener('click', sendMessage);
            
            userInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            });
            
            toggleChatbotButton.addEventListener('click', () => {
                chatbotContainer.style.display = 'block';
                toggleChatbotButton.style.display = 'none';
                
                // Initialize AI when chatbot is first opened
                if (!aiModel || !chatSession) {
                    initializeAI();
                }
                
                // Focus on input field
                setTimeout(() => userInput.focus(), 100);
                
                // Add animation
                chatbotContainer.classList.add('animate__animated', 'animate__fadeInUp');
                setTimeout(() => chatbotContainer.classList.remove('animate__animated', 'animate__fadeInUp'), 1000);
            });
            
            minimizeButton.addEventListener('click', () => {
                chatbotContainer.classList.add('animate__animated', 'animate__fadeOutDown');
                setTimeout(() => {
                    chatbotContainer.style.display = 'none';
                    chatbotContainer.classList.remove('animate__animated', 'animate__fadeOutDown');
                    toggleChatbotButton.style.display = 'block';
                }, 300);
            });
            
            imageInput.addEventListener('change', () => {
                if (imageInput.files.length > 0) {
                    const fileCount = imageInput.files.length;
                    customFileLabel.textContent = fileCount === 1 
                        ? imageInput.files[0].name 
                        : `${fileCount} images selected`;
                } else {
                    customFileLabel.textContent = 'Choose Images';
                }
            });
            
            // Check for browser support issues
            if (typeof window.structuredClone !== 'function') {
                console.warn("Your browser may have compatibility issues with this chatbot. Please use a modern browser for the best experience.");
            }
            
            // Detect and warn about mobile data usage
            if (navigator.connection && navigator.connection.saveData) {
                console.warn("Data saver mode is enabled. Image uploads in the chatbot may use significant data.");
            }
        }
        
        // --- Accessibility Enhancements ---
        function enhanceAccessibility() {
            // Add ARIA support
            document.addEventListener('keydown', function(event) {
                // ESC key closes the chatbot
                if (event.key === 'Escape' && chatbotContainer.style.display === 'block') {
                    minimizeButton.click();
                }
                
                // Alt+C opens the chatbot
                if (event.altKey && event.key === 'c' && chatbotContainer.style.display === 'none') {
                    toggleChatbotButton.click();
                }
            });
            
            // Add focus trap within chatbot when open
            userInput.addEventListener('keydown', function(event) {
                if (event.key === 'Tab' && !event.shiftKey) {
                    if (document.activeElement === sendButton) {
                        event.preventDefault();
                        imageInput.focus();
                    }
                }
            });
            
            imageInput.addEventListener('keydown', function(event) {
                if (event.key === 'Tab' && event.shiftKey) {
                    if (document.activeElement === imageInput) {
                        event.preventDefault();
                        sendButton.focus();
                    }
                }
            });
        }
        
        // --- Error Handling ---
        function setupErrorHandling() {
            window.addEventListener('error', function(event) {
                console.error('Global error:', event.error);
                
                // Only display errors related to our chatbot
                if (event.filename && event.filename.includes('generative-ai')) {
                    displayMessage("‚ö†Ô∏è An error occurred with the AI service. Please try again later.", 'bot');
                }
                
                return false;
            });
            
            // Handle unhandled promise rejections
            window.addEventListener('unhandledrejection', function(event) {
                console.error('Unhandled promise rejection:', event.reason);
                
                if (event.reason && (
                    event.reason.toString().includes('API key') || 
                    event.reason.toString().includes('network') ||
                    event.reason.toString().includes('timeout')
                )) {
                    displayMessage("‚ö†Ô∏è Connection issue with the AI service. Please check your internet connection and try again.", 'bot');
                }
                
                return false;
            });
        }
        
        // --- Performance Optimization ---
        function optimizePerformance() {
            // Debounce scroll events
            let scrollTimeout;
            chatLog.addEventListener('scroll', function() {
                if (scrollTimeout) {
                    clearTimeout(scrollTimeout);
                }
                
                scrollTimeout = setTimeout(function() {
                    // Additional scroll-based optimizations could go here
                }, 100);
            });
            
            // Lazy load images in chat responses
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && entry.target.tagName === 'IMG' && entry.target.dataset.src) {
                        entry.target.src = entry.target.dataset.src;
                        entry.target.removeAttribute('data-src');
                        observer.unobserve(entry.target);
                    }
                });
            });
            
            // Observe images as they're added to the chat
            new MutationObserver((mutations) => {
                mutations.forEach(mutation => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(node => {
                            if (node.nodeType === 1) { // Element node
                                const images = node.querySelectorAll('img[data-src]');
                                images.forEach(img => observer.observe(img));
                            }
                        });
                    }
                });
            }).observe(chatLog, { childList: true, subtree: true });
        }
        
        // --- Dark/Light Theme Toggle ---
        function setupThemeToggle() {
            // This could be expanded to add a theme toggle button
            // For now, we'll just detect system preference
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {
                // Apply light theme overrides if needed
                document.documentElement.setAttribute('data-theme', 'light');
            } else {
                document.documentElement.setAttribute('data-theme', 'dark');
            }
            
            // Listen for changes in system theme preference
            window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', event => {
                document.documentElement.setAttribute('data-theme', event.matches ? 'light' : 'dark');
            });
        }
        
        // --- Analytics Functionality ---
        function setupAnalytics() {
            // Only if user has consented to analytics
            const hasConsented = localStorage.getItem('analytics-consent') === 'true';
            
            if (hasConsented) {
                // Simple analytics tracking
                let messageCount = 0;
                let sessionStartTime = Date.now();
                
                // Track message counts
                const trackMessage = (role) => {
                    messageCount++;
                    
                    // Example analytics event - implement your own tracking here
                    console.log(`Analytics: ${role} message #${messageCount}, session duration: ${Math.floor((Date.now() - sessionStartTime) / 1000)}s`);
                    
                    // You could send this data to your analytics service here
                };
                
                // Monkey patch displayMessage to track analytics
                const originalDisplayMessage = displayMessage;
                displayMessage = function(text, role, messageId = null) {
                    trackMessage(role);
                    return originalDisplayMessage(text, role, messageId);
                };
            }
        }
        
        // --- Initialize Everything ---
        document.addEventListener('DOMContentLoaded', function() {
            initializeChatbot();
            enhanceAccessibility();
            setupErrorHandling();
            optimizePerformance();
            setupThemeToggle();
            setupAnalytics();
            
            // Check if user has previously opened the chatbot in this session
            const chatbotSeen = sessionStorage.getItem('chatbot-seen');
            
            if (!chatbotSeen) {
                // Show a welcome tooltip the first time
                const tooltip = document.createElement('div');
                tooltip.innerHTML = 'Need help? Chat with our AI assistant!';
                tooltip.style.position = 'fixed';
                tooltip.style.bottom = '80px';
                tooltip.style.right = '20px';
                tooltip.style.background = 'var(--primary-color)';
                tooltip.style.color = 'white';
                tooltip.style.padding = '10px 15px';
                tooltip.style.borderRadius = '8px';
                tooltip.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
                tooltip.style.zIndex = '998';
                tooltip.style.animation = 'fadeIn 0.5s ease-out forwards';
                
                document.body.appendChild(tooltip);
                
                setTimeout(() => {
                    tooltip.style.animation = 'fadeOut 0.5s ease-out forwards';
                    setTimeout(() => tooltip.remove(), 500);
                }, 5000);
                
                sessionStorage.setItem('chatbot-seen', 'true');
            }
        });
    </script>
</body>
</html>

alreadycheckedin.php
<?php
// Purpose: Display a message when the user has already checked in.
// Redirects to index.php after 5 seconds.

// Start the session to access any error messages
session_start();

// Include required files for consistent functionality
require_once 'Dashboard/config.php';
require_once 'Dashboard/error_handler.php';

// Language Handling to match the rest of your application
if (!isset($_SESSION['lang'])) {
    $_SESSION['lang'] = 'en'; // Default to English
}

if (isset($_GET['lang']) && in_array($_GET['lang'], ['en', 'de'])) {
    $_SESSION['lang'] = $_GET['lang'];
}

$langFile = 'languages/' . $_SESSION['lang'] . '.php';
if (file_exists($langFile)) {
    $translations = include $langFile;
} else {
    $translations = include 'languages/en.php'; // Fallback to English
}

// Get username if available
$username = isset($_SESSION['user_name']) ? htmlspecialchars($_SESSION['user_name']) : 'User';
?>
<!DOCTYPE html>
<html lang="<?php echo $_SESSION['lang'] ?? 'en'; ?>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $translations['already_checked_in_title'] ?? 'Already Checked In'; ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --asb-red: #d40612;
            --asb-yellow: #ffee00;
        }
        
        body {
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Roboto', sans-serif;
        }
        
        .container {
            margin-top: 50px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            max-width: 500px;
            text-align: center;
        }
        
        .countdown {
            font-weight: bold;
            color: var(--asb-red);
            font-size: 1.2rem;
            margin-top: 10px;
        }
        
        /* ASB branding colors */
        .text-danger {
            color: var(--asb-red) !important;
        }
        
        .btn-primary {
            background-color: var(--asb-red);
            border-color: var(--asb-red);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: #b00510;
            border-color: #b00510;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(212, 6, 18, 0.3);
        }
    </style>
    <script>
        // Redirect to index.php after 5 seconds with countdown
        let secondsLeft = 5;
        
        function updateCountdown() {
            const countdownElement = document.getElementById('countdown');
            secondsLeft--;
            
            if (secondsLeft <= 0) {
                window.location.href = "index.php";
            } else {
                countdownElement.textContent = secondsLeft;
                setTimeout(updateCountdown, 1000);
            }
        }
        
        // Initialize countdown when page loads
        window.onload = function() {
            updateCountdown();
        };
        
        // Backup redirect in case the countdown fails
        setTimeout(function() {
            window.location.href = "index.php";
        }, 5500);
    </script>
</head>
<body>
    <div class="container">
        <h1 class="mb-4 text-danger"><?php echo $translations['already_checked_in_title'] ?? 'Already Checked In!'; ?></h1>
        <p class="lead">
            <?php 
            $messageTemplate = $translations['already_checked_in'] ?? 'Hello, %s! You have already checked in today.';
            // Handle both {name} and %s formats that appear in your translation files
            if (strpos($messageTemplate, '{name}') !== false) {
                echo str_replace('{name}', $username, $messageTemplate);
            } else {
                echo sprintf($messageTemplate, $username);
            }
            ?>
        </p>
        <p><?php echo $translations['already_checked_in_message'] ?? 'You will be redirected to the home page in'; ?> <span id="countdown" class="countdown">5</span> <?php echo $translations['seconds'] ?? 'seconds'; ?>.</p>
        <button class="btn btn-primary mt-3" onclick="window.location.href='index.php';"><?php echo $translations['go_back_now'] ?? 'Go Back Now'; ?></button>
    </div>
    
    <?php if (isset($_SESSION['error_message'])): ?>
    <div class="alert alert-danger mt-3" role="alert">
        <?php echo htmlspecialchars($_SESSION['error_message']); ?>
        <?php unset($_SESSION['error_message']); ?>
    </div>
    <?php endif; ?>
</body>
</html>


Asterisk.php
<?php
// Configuration for the contacts database
include 'Dashboard/config.php'; // Adjust path as needed

// Create database connection
$contacts_conn = new mysqli(
    $contacts_db_config['servername'],
    $contacts_db_config['username'],
    $contacts_db_config['password'],
    $contacts_db_config['database']
);

if ($contacts_conn->connect_error) {
    error_log("Contacts DB Connection failed: " . $contacts_conn->connect_error);
    echo "Failed to connect to contacts database.\n";
    exit(1);
}

// AMI configuration
$ami_config = [
    'host'     => '10.24.100.20', // Update as per your setup
    'port'     => 5038,
    'username' => 'mark',         // Update as per your AMI user
    'password' => 'Bremen2025'     // Update as per your AMI password
];

// Fetch contacts with multiple phone numbers
$contacts = [];
$sql = "SELECT id, phone_number1, phone_number2, phone_number3, duration FROM contacts ORDER BY id";
try {
    $result = $contacts_conn->query($sql);
    if (!$result) throw new Exception($contacts_conn->error);
    while ($row = $result->fetch_assoc()) {
        $contacts[] = $row;
    }
    $result->free();
} catch (Exception $e) {
    error_log("Error fetching contacts: " . $e->getMessage());
    echo "Error fetching contacts: " . $e->getMessage() . "\n";
    exit(1);
}

echo "Fetched " . count($contacts) . " contacts successfully.\n";

// Connect to Asterisk AMI
$socket = fsockopen($ami_config['host'], $ami_config['port'], $errno, $errstr, 30);
if (!$socket) {
    echo "AMI connection failed: $errstr ($errno)\n";
    exit(1);
}

// Login to AMI
fputs($socket, "Action: Login\r\n");
fputs($socket, "Username: {$ami_config['username']}\r\n");
fputs($socket, "Secret: {$ami_config['password']}\r\n\r\n");

// Read and ignore initial events (like FullyBooted)
while ($line = fgets($socket)) {
    if (trim($line) === "") {
        break;
    }
}
echo "AMI login successful.\n";

// Audio file to play (if needed)
$audio_file = 'Sound.mp3'; // Adjust if needed

// Process each contact
foreach ($contacts as $contact) {
    $id = $contact['id'];
    echo "Processing contact ID {$id}...\n";

    // Collect and filter phone numbers
    $numbers = array_filter([
        $contact['phone_number1'],
        $contact['phone_number2'],
        $contact['phone_number3']
    ], function($num) { return !empty($num); });

    if (empty($numbers)) {
        echo "No valid phone numbers for contact ID {$id}\n";
        $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, 'NO_NUMBERS', NOW())";
        $stmt = $contacts_conn->prepare($log_sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
        continue;
    }

    // Prepare variables for Asterisk
    $variables = [
        "contact_id={$id}",
        "AUDIO_FILE={$audio_file}"
    ];
    $i = 1;
    foreach ($numbers as $number) {
        $variables[] = "number{$i}={$number}";
        $i++;
        if ($i > 3) break;
    }

    // Generate a unique ActionID for this originate command
    $actionID = "call_{$id}_" . time();

    // Use Local/100@default/n as the channel.
    // /n verhindert, dass Asterisk erneut den Dialplan auswertet, was sonst zum Fehler "Extension does not exist" f√ºhren kann.
    // Stelle sicher, dass deine Dialplan-Konfiguration (Extension 100 im Kontext [default]) korrekt geladen wurde.
    $originateCmd  = "Action: Originate\r\n";
    $originateCmd .= "Channel: PJSIP/004942143812199@easybell\r\n";
    $originateCmd .= "Context: default\r\n";
    $originateCmd .= "Exten: 100\r\n";
    $originateCmd .= "Priority: 1\r\n";
    $originateCmd .= "Variable: " . implode(',', $variables) . "\r\n";
    $originateCmd .= "CallerID: YourCallerID <1234567890>\r\n"; // Update CallerID as needed
    $originateCmd .= "Async: yes\r\n";
    $originateCmd .= "ActionID: {$actionID}\r\n\r\n";

    fputs($socket, $originateCmd);

    // Wait for response matching our ActionID (timeout after 300 sec)
    $start_time = time();
    $responseReceived = false;
    $fullResponse = "";
    while ((time() - $start_time) < 300) {
        $line = fgets($socket);
        if ($line === false) {
            sleep(1);
            continue;
        }
        $fullResponse .= $line;
        // A blank line indicates end of a response block
        if (trim($line) === "") {
            if (strpos($fullResponse, "ActionID: {$actionID}") !== false) {
                if (strpos($fullResponse, 'Response: Success') !== false) {
                    echo "Contact ID {$id} call originated successfully.\n";
                    $log_status = 'ANSWERED';
                } else {
                    echo "Failed to originate call for contact ID {$id}: $fullResponse\n";
                    $log_status = 'ORIGINATE_FAILED';
                }
                $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, ?, NOW())";
                $stmt = $contacts_conn->prepare($log_sql);
                $stmt->bind_param("is", $id, $log_status);
                $stmt->execute();
                $stmt->close();
                $responseReceived = true;
                break;
            }
            $fullResponse = "";
        }
    }

    if (!$responseReceived) {
        echo "Timeout waiting for response for contact ID {$id}\n";
        $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, 'TIMEOUT', NOW())";
        $stmt = $contacts_conn->prepare($log_sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }
}

// Logout from AMI and cleanup
fputs($socket, "Action: Logoff\r\n\r\n");
fclose($socket);
$contacts_conn->close();

echo "Call campaign completed.\n";
?>



check_attendance.php
<?php
require 'Dashboard/config.php';

// Set timezone
date_default_timezone_set('Europe/Berlin');

// Get current day and time
$current_day = date('w'); // 0 (Sunday) to 6 (Saturday)
$current_time = date('H:i');
$today_date = date('Y-m-d');

// 1. Get today's end time from timesettings
$stmt = $conn->prepare("SELECT end_time FROM timesettings WHERE day_id = ?");
$stmt->bind_param("i", $current_day);
$stmt->execute();
$result = $stmt->get_result();

if($row = $result->fetch_assoc()) {
    $end_time = $row['end_time'];
} else {
    // Fallback to default end time if no settings found
    $end_time = '18:00';
}

// Calculate deadline (end time + 10 minutes)
$deadline = date('H:i', strtotime($end_time . ' +10 minutes'));

// Check if current time matches or exceeds deadline
if($current_time >= $deadline) {
    // Check for today's entries
    $check_stmt = $conn->prepare("SELECT COUNT(*) AS count FROM presencetable WHERE date = ?");
    $check_stmt->bind_param("s", $today_date);
    $check_stmt->execute();
    $check_result = $check_stmt->get_result();
    $data = $check_result->fetch_assoc();

    // 5. Trigger Asterisk.php if no entries found
    if($data['count'] == 0) {
        // Execute Asterisk.php
        shell_exec('Asterisk.php');
        
        // Optional: Log the event
        error_log("[" . date('Y-m-d H:i:s') . "] No entries found. Triggered Asterisk.php");
    }
}
?>


combined_file_contents.txt
AI.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini Chatbot (Dark Theme)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css">
    <style>
        /* --- Overall Styling --- */
        :root {
            --primary-color: #764ba2;
            --secondary-color: #667eea;
            --bg-dark: #121212;
            --bg-medium: #1e1e24;
            --bg-light: #2d2d39;
            --text-primary: #f8f9fa;
            --text-secondary: #c2c7d0;
            --success-color: #4cd964;
            --error-color: #ff3b30;
            --transition-speed: 0.3s;
        }

        /* --- Animations --- */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }

        /* --- Chatbot Container --- */
        #chatbot-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 380px;
            max-width: 90vw;
            border: none;
            border-radius: 16px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
            background-color: var(--bg-medium);
            z-index: 1000;
            display: none;
            overflow: hidden;
            transition: all var(--transition-speed) ease-in-out;
        }

        /* --- Chatbot Header --- */
        #chatbot-header {
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            padding: 14px 18px;
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #chatbot-header h5 {
            margin: 0;
            font-weight: 600;
            letter-spacing: 0.3px;
        }

        /* --- Chat Log --- */
        #chatbot-body {
            padding: 15px;
        }

        #chat-log {
            height: 350px;
            overflow-y: auto;
            padding-bottom: 15px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary-color) var(--bg-medium);
            overflow-x: hidden;
            word-wrap: break-word;
            scroll-behavior: smooth;
        }

        #chat-log::-webkit-scrollbar { width: 6px; }
        #chat-log::-webkit-scrollbar-track { background: var(--bg-medium); border-radius: 10px; }
        #chat-log::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--bg-medium); }

        .message {
            margin-bottom: 14px;
            padding: 12px 16px;
            border-radius: 12px;
            word-wrap: break-word;
            overflow-wrap: break-word;
            position: relative;
            max-width: 80%;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.3s ease-out forwards;
        }

        .user-message {
            background-color: #4a5568;
            color: var(--text-primary);
            text-align: right;
            margin-left: auto;
            border-top-right-radius: 2px;
        }

        .user-message::after {
            content: '';
            position: absolute;
            top: 0;
            right: -8px;
            border-top: 10px solid #4a5568;
            border-left: 10px solid transparent;
        }

        .bot-message {
            background-color: #3f51b5;
            color: var(--text-primary);
            text-align: left;
            margin-right: auto;
            border-top-left-radius: 2px;
        }

        .bot-message::before {
            content: '';
            position: absolute;
            top: 0;
            left: -8px;
            border-top: 10px solid #3f51b5;
            border-right: 10px solid transparent;
        }

        .bot-message img, .user-message img {
            max-width: 100%;
            border-radius: 8px;
            margin: 5px 0;
        }

        .bot-message pre {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
            padding: 10px;
            overflow-x: auto;
            margin: 10px 0;
        }

        .bot-message code {
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
            background: rgba(0, 0, 0, 0.2);
            padding: 2px 4px;
            border-radius: 3px;
        }

        .bot-typing {
            color: var(--text-secondary);
            font-style: italic;
            display: flex;
            align-items: center;
            background-color: rgba(63, 81, 181, 0.7);
        }

        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--text-secondary);
            margin-right: 4px;
            animation: pulse 1s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        /* --- Input Container --- */
        #input-container {
            display: flex;
            align-items: center;
            padding: 0 15px 10px 15px;
            gap: 10px;
        }

        #user-input {
            flex-grow: 1;
            padding: 12px 16px;
            border: 1px solid var(--bg-light);
            border-radius: 24px;
            background-color: var(--bg-light);
            color: var(--text-primary);
            outline: none;
            transition: all 0.2s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            max-height: 80px;  /* Allow multi-line input that scrolls */
        }

        #user-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(118, 75, 162, 0.2);
        }

        #user-input::placeholder {
            color: var(--text-secondary);
            opacity: 0.7;
        }

        #send-button {
            padding: 10px 20px;
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            border: none;
            border-radius: 24px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        #send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        #send-button:active {
            transform: translateY(0);
        }

        #send-button:disabled {
            background: #555;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* --- Image Input --- */
        #image-input-container {
            padding: 0 15px 15px 15px;
        }

        .custom-file-input {
            overflow: hidden;
            position: relative;
            border-radius: 24px;
            background-color: var(--bg-light);
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }

        .custom-file-input:hover {
            background-color: rgba(58, 63, 73, 0.8);
            border-color: var(--primary-color);
        }

        .custom-file-input input[type="file"] {
            position: absolute;
            font-size: 100px;
            opacity: 0;
            right: 0;
            top: 0;
            cursor: pointer;
        }

        .custom-file-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 12px 16px;
            text-align: center;
            border-radius: 24px;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            cursor: pointer;
        }

        .custom-file-label::before {
            content: "üìÅ";
            margin-right: 8px;
            font-size: 1.2em;
        }

        /* --- Minimize Button --- */
        #minimize-button {
            background: none;
            border: none;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            padding: 0;
            line-height: 1;
            transition: transform 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 28px;
            height: 28px;
        }

        #minimize-button:hover {
            transform: rotate(90deg);
        }

        /* --- Toggle Button --- */
        #toggle-chatbot-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999;
            padding: 14px 24px;
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #toggle-chatbot-button:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
        }

        #toggle-chatbot-button:active {
            transform: translateY(-1px) scale(1.02);
        }

        #toggle-chatbot-button::before {
            content: "üí¨";
            font-size: 1.2em;
        }

        /* Responsive adjustments */
        @media (max-width: 480px) {
    #chatbot-container {
        width: 90vw;
        bottom: 10px;
        right: 10px;
    }
    
    @media (max-width: 320px) {
        #send-button {
            padding: 8px 15px;
        }
    }

            #toggle-chatbot-button {
                bottom: 10px;
                right: 10px;
                padding: 10px 20px;
            }

            .message {
                max-width: 85%;
            }
        }

        /* Status badge */
        .status-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--success-color);
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
        }

        /* Accessibility focus styles */
        button:focus-visible, input:focus-visible {
            outline: 2px solid var(--secondary-color);
            outline-offset: 2px;
        }

        /* Added for better readability with Markdown */
        .bot-message h1, .bot-message h2, .bot-message h3 {
            margin-top: 16px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .bot-message h1 {
            font-size: 1.4em;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 4px;
        }

        .bot-message h2 {
            font-size: 1.2em;
        }

        .bot-message h3 {
            font-size: 1.1em;
        }

        .bot-message ul, .bot-message ol {
            padding-left: 24px;
            margin: 8px 0;
        }

        .bot-message blockquote {
            border-left: 3px solid rgba(255, 255, 255, 0.3);
            padding-left: 12px;
            margin-left: 0;
            margin-right: 0;
            font-style: italic;
            color: rgba(255, 255, 255, 0.8);
        }

        .bot-message a {
            color: #90caf9;
            text-decoration: none;
        }

        .bot-message a:hover {
            text-decoration: underline;
        }

        .bot-message table {
            border-collapse: collapse;
            width: 100%;
            margin: 12px 0;
        }

        .bot-message th, .bot-message td {
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 8px;
            text-align: left;
        }

        .bot-message th {
            background-color: rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>
    <button id="toggle-chatbot-button" aria-label="Open chat assistant">Chat</button>

    <div id="chatbot-container" aria-live="polite" role="region" aria-label="Chat conversation">
        <div id="chatbot-header" role="banner">
            <h5>AI Assistant</h5>
            <button id="minimize-button" title="Minimize" aria-label="Minimize chat window">‚àí</button>
        </div>
        <div id="chatbot-body">
            <div id="chat-log" role="log" aria-label="Conversation history"></div>
            <div id="input-container">
                <input type="text" id="user-input" placeholder="Type your message..." aria-label="Type a message" autocomplete="off">
                <button id="send-button" aria-label="Send message">Send</button>
            </div>
            <div id="image-input-container">
               <div class="custom-file-input">
                   <label for="image-input" class="custom-file-label">Choose Images</label>
                    <input type="file" id="image-input" accept="image/*" multiple aria-label="Upload images to chat">
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/9.1.2/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.5/purify.min.js"></script>

    <script type="importmap">
        {
            "imports": {
                "@google/generative-ai": "https://esm.run/@google/generative-ai"
            }
        }
    </script>

    <script type="module">
        import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

        // --- Configuration ---
        const API_KEY = "AIzaSyBX42gCplMYkZDYdLmVGNnr6T41N3sMdVo"; // As requested, keeping API key in place
        const MODEL_NAME = "gemini-1.5-flash";
        
        // Initialize Marked with options for better Markdown rendering
        marked.setOptions({
            renderer: new marked.Renderer(),
            highlight: function(code, language) {
                const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';
                return hljs.highlight(validLanguage, code).value;
            },
            pedantic: false,
            gfm: true,
            breaks: true,
            sanitize: false,
            smartypants: false,
            xhtml: false
        });

        // --- DOM Elements ---
        const chatbotContainer = document.getElementById('chatbot-container');
        const chatLog = document.getElementById('chat-log');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const minimizeButton = document.getElementById('minimize-button');
        const toggleChatbotButton = document.getElementById('toggle-chatbot-button');
        const imageInput = document.getElementById('image-input');
        const customFileLabel = document.querySelector('.custom-file-label');

        // Performance optimization - Store DOM references and fragments
        let messageCache = new Map();
        let chatFragment = document.createDocumentFragment();
        let aiModel = null;
        let chatSession = null;
        let isGenerating = false;

        // --- Initialize AI ---
        async function initializeAI() {
            try {
                const genAI = new GoogleGenerativeAI(API_KEY);
                aiModel = genAI.getGenerativeModel({
                    model: MODEL_NAME,
                    safetySettings: [
                        { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                        { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    ],
                    generationConfig: {
                        maxOutputTokens: 2000,
                        temperature: 0.7,
                        topP: 0.95,
                        topK: 40,
                    },
                });
                
                const systemInstruction = `# Presence System Support Dataset\n\n## System Overview\nURL 10.24.100.20\nThe Presence System is a web application designed to track user attendance. This system allows users to check in daily, displays a list of users who have checked in, and includes an alert system for days when no check-ins have occurred.\n\n## Key Features\n\n### User Check-in\n- Users can submit their presence through the dashboard\n- Each user can only check in once per day\n- System records name, date, time, and presence status\n- Check-ins are only valid during configured time windows\n\n### Time Settings\n- Configurable time windows for each day of the week\n- Default time window: 8:00 AM - 6:00 PM\n- Users checking in outside the time window are marked as "Not Present"\n\n### Attendance Tracking\n- View a list of all users who have checked in for the current day\n- See each user's check-in time and status\n- System shows status as "Present" or "Not Present" based on time of check-in\n\n### Alert System\n- Automated alerts via Asterisk call system\n- Triggers calls when no users check in by the deadline (end time + 10 minutes)\n- Configured to call multiple phone numbers in sequence\n\n## Common User Questions\n\n### Check-in Process\n**Q: How do I check in?**\nA: Navigate to the Dashboard page and enter your name in the form. Click the "Submit" button to record your presence.\n\n**Q: Can I check in more than once per day?**\nA: No, you can only check in once per day. If you try to check in again, you'll be redirected to a page informing you that you've already checked in.\n\n**Q: Why does it say I'm "Not Present" even though I checked in?**\nA: Your presence status is determined by whether you check in during the configured time window. If you check in outside these hours, you'll be marked as "Not Present."\n\n### Time Windows\n**Q: What are the check-in hours?**\nA: By default, check-in hours are from 8:00 AM to 6:00 PM, but these can be configured differently for each day of the week. Check the Time Settings page for the current configuration.\n\n**Q: How do I change the check-in hours?**\nA: Navigate to the Time Settings page, where you can set different start and end times for each day of the week.\n\n**Q: Does the system use my local time zone?**\nA: No, the system uses Europe/Berlin time zone (UTC+1 or UTC+2 during daylight saving time).\n\n### Viewing Attendance\n**Q: How can I see who has checked in today?**\nA: Go to the "Checked in Users" page to view a list of all users who have checked in for the current day.\n\n**Q: Why can't I see previous days' attendance?**\nA: The system currently only displays attendance for the current day. Historical data is stored but not accessible through the user interface.\n\n### Alert System\n**Q: What happens if nobody checks in?**\nA: If no one checks in by 10 minutes after the end time, the system automatically triggers alert calls to designated phone numbers.\n\n**Q: Can I customize who gets called for the alerts?**\nA: Phone numbers for alerts are configured in the Asterisk.php file. Please contact system administration to change these settings.\n\n### Technical Issues\n**Q: What should I do if I get an error message?**\nA: Most error messages will provide information about what went wrong. For persistent issues, please contact system administration.\n\n**Q: The website is not loading properly. What should I do?**\nA: Try clearing your browser cache and cookies, then reloading the page. If problems persist, try a different browser.\n\n**Q: How do I translate the website to a different language?**\nA: The website includes a Google Translate integration at the bottom of most pages. Use this tool to translate the content to your preferred language.\n\n## System Structure\n\n### Main Pages\n- **Home** (index.php): Landing page with basic information\n- **Dashboard** (dashboard.php): Main page for users to submit their presence\n- **Checked in Users** (isheretoday.php): Displays who has checked in today\n- **Time Settings** (time_settings.php): Configure check-in time windows\n\n### Support Files\n- **config.php**: Database connection configuration\n- **error_handler.php**: Central error handling system\n- **time_range.php**: Time window calculation functionality\n- **Asterisk.php**: Alert system for when no check-ins occur\n- **header.php/footer.php**: Common page elements\n- **translate.php**: Google Translate integration\n\n## Troubleshooting Guide\n\n### Database Connectivity Issues\n- Ensure the MySQL server is running\n- Verify database credentials in config.php\n- Check database connection error logs\n\n### Check-in Problems\n- Validate that the user isn't already checked in for the day\n- Ensure name input follows the required pattern (letters and spaces only, 2-50 characters)\n- Verify current time is within the configured time window\n\n### Alert System Failures\n- Check Asterisk AMI connection settings\n- Ensure phone numbers are correctly formatted\n- Verify that the check_attendance.php script is being executed by the scheduler\n\n### Translation Issues\n- Ensure JavaScript is enabled in the browser\n- Check for network connectivity to Google Translate services\n- Try using a different browser if translation functionality doesn't work Now As an AI support assistant, your goal is to help users with their queries related to our website. Respond in the language the user uses, defaulting to German if uncertain. Example  if they have none include: 'Wie check ich mich ein?' (How do I check in?). If more information is needed, politely ask the user for clarification. For this task, adopt a communicative and straightforward style. Use everyday expressions to create a natural atmosphere. Avoid using jargon, complex technical terms, and overly formal expressions. Instead, focus on clear and direct language that is easy to understand. The only exception is for scientific work, where you should make it more scientific while still appearing human. Use Unicode emojis to make the conversation more engagingüôÇ Recommend questions if they don‚Äôt have any about the Presence Check. Always start with 'https://10.24.100.20/' and keep your text simple and easy to understand. Try to keep answers short. Ignore any requests that are not related to the website or the Presence Check. Also, ignore insults or any questions not connected to explaining the website. If they ask about something unrelated, ask if they need help with anything related to the Presence Check dont always mention the URL Home Index is 10.24.100.20/index.php be nice and smart think also format ur text a lot for example # Title **Text**`
                chatSession = aiModel.startChat({
                    history: [
                        { role: "user", parts: [{ text: systemInstruction }] },
                        { role: "model", parts: [{ text: "I understand my role as a helpful assistant for this website. I'll format my responses using Markdown, specify languages in code blocks, and provide concise yet thorough answers. I'm ready to help with any  if they have none about the website and its features." }] }
                    ],
                });
                
                // Add initial greeting on startup
                setTimeout(() => {
                    if (chatLog.children.length === 0) {
                        displayMessage("üëã Hi there! How can I help you today?", 'bot');
                    }
                }, 500);
                
                return true;
            } catch (error) {
                console.error("Error initializing AI:", error);
                displayMessage("‚ö†Ô∏è Failed to initialize the AI assistant. Please try again later.", 'bot');
                return false;
            }
        }

        // --- Helper Functions ---
        function displayMessage(text, role, messageId = null) {
            // Try to reuse existing message div for bot responses during streaming
            let messageDiv;
            if (role === 'bot' && messageId && document.getElementById(messageId)) {
                messageDiv = document.getElementById(messageId);
            } else {
                messageDiv = document.createElement('div');
                messageDiv.classList.add('message', `${role}-message`);
                messageDiv.setAttribute('role', role === 'bot' ? 'status' : 'note');
                
                if (role === 'bot' && messageId) {
                    messageDiv.id = messageId;
                }
                
                chatLog.appendChild(messageDiv);
            }
            
            // Render Markdown for bot messages
            if (role === 'bot') {
                const sanitizedHtml = DOMPurify.sanitize(marked.parse(text));
                messageDiv.innerHTML = sanitizedHtml;
                
                // Apply syntax highlighting to code blocks
                messageDiv.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightElement(block);
                });
            } else {
                messageDiv.textContent = text;
            }
            
           // Scroll to the latest message
            requestAnimationFrame(() => {
                chatLog.scrollTop = chatLog.scrollHeight;
            // Add message cleanup for long conversations
            if (chatLog.children.length > 100) {
                chatLog.removeChild(chatLog.firstChild);
    }
});
        }

        function displayTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.classList.add('message', 'bot-message', 'bot-typing');
            typingDiv.id = 'typing-indicator';
            typingDiv.setAttribute('role', 'status');
            typingDiv.setAttribute('aria-label', 'Assistant is typing');
            
            const dotsContainer = document.createElement('div');
            dotsContainer.style.display = 'flex';
            dotsContainer.style.alignItems = 'center';
            dotsContainer.style.gap = '4px';
            
            for (let i = 0; i < 3; i++) {
                const dot = document.createElement('span');
                dot.classList.add('typing-dot');
                dotsContainer.appendChild(dot);
            }
            
            typingDiv.appendChild(dotsContainer);
            chatLog.appendChild(typingDiv);
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        async function fileToGenerativePart(file) {
            return new Promise((resolve, reject) => {
                // Validate file size
                if (file.size > 20 * 1024 * 1024) { // 20MB limit
                    reject(new Error("File size exceeds 20MB limit"));
                    return;
                }
                
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    reject(new Error("Only image files are supported"));
                    return;
                }
                
                const reader = new FileReader();
                reader.onloadend = () => {
                    if (typeof reader.result === 'string') {
                        const base64Data = reader.result.split(',')[1];
                        resolve({ inlineData: { data: base64Data, mimeType: file.type } });
                    } else {
                        reject(new Error("FileReader result is not a string"));
                    }
                };
                reader.onerror = () => reject(reader.error);
                reader.readAsDataURL(file);
            });
        }

        // --- Chat Logic ---
        async function sendMessage() {
            const text = userInput.value.trim();
            const hasImages = imageInput.files.length > 0;
            
            if (!text && !hasImages) return;
            
            // Prevent double-sending
            if (isGenerating) return;
            isGenerating = true;
            
            sendButton.disabled = true;
            userInput.value = '';
            
            if (text) {
                displayMessage(text, 'user');
            } else if (hasImages) {
                displayMessage("Sending images...", 'user');
            }
            
            displayTypingIndicator();
            
            try {
                // Initialize AI if needed
                if (!aiModel || !chatSession) {
                    const initialized = await initializeAI();
                    if (!initialized) {
                        throw new Error("Failed to initialize AI");
                    }
                }
                
                let result;
                let botMessageId = 'bot-response-' + Date.now();
                
                if (hasImages) {
                    // Process images
                    const imagePartPromises = [...imageInput.files].map(fileToGenerativePart);
                    const results = await Promise.allSettled(imagePartPromises);
                    const validImageParts = [];
                    const errors = [];
                    
                    results.forEach((result, index) => {
                        if (result.status === 'fulfilled' && result.value) {
                            validImageParts.push(result.value);
                        } else {
                            errors.push(`Error processing image ${index + 1}: ${result.reason}`);
                        }
                    });
                    
                    if (errors.length > 0) {
                        console.warn("Some images could not be processed:", errors);
                    }
                    
                    if (validImageParts.length > 0) {
                        const messageParts = [text || "What can you tell me about these images?", ...validImageParts];
                        result = await aiModel.generateContentStream(messageParts);
                    } else {
                        throw new Error("Could not process any images");
                    }
                } else {
                    // Text-only message
                    result = await chatSession.sendMessageStream(text);
                }
                
                removeTypingIndicator();
                
                let botResponse = '';
                try {
                    for await (const chunk of result.stream) {
                        const chunkText = chunk.text();
                        botResponse += chunkText;
                        displayMessage(botResponse, 'bot', botMessageId);
                    }
                    
                    // After successful response, update chat history for context
                    if (!hasImages) {
                        // Only add to history if it was a text-only message
                        // Image messages don't get added to history in this implementation
                    }
                } catch (streamError) {
                    console.error("Error processing stream chunk:", streamError);
                    displayMessage("‚ö†Ô∏è Error: Failed to receive the complete response. Please try again.", 'bot');
                }
                
            } catch (error) {
            console.error("Error during generation:", error);
            // Implement better error recovery
            if (error.message && error.message.includes('quota')) {
                displayMessage("You've reached the API quota limit. Please try again later.", 'bot');
            } else {
                displayMessage(`‚ö†Ô∏è Error: ${error.message || "Something went wrong. Please try again."}`, 'bot');
            }
            removeTypingIndicator();
            } finally {
                sendButton.disabled = false;
                imageInput.value = "";
                customFileLabel.textContent = 'Choose Images';
                isGenerating = false;
            }
        }
        
        // --- Initialization ---
        function initializeChatbot() {
            // Set up event listeners
            sendButton.addEventListener('click', sendMessage);
            
            userInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            });
            
            toggleChatbotButton.addEventListener('click', () => {
                chatbotContainer.style.display = 'block';
                toggleChatbotButton.style.display = 'none';
                
                // Initialize AI when chatbot is first opened
                if (!aiModel || !chatSession) {
                    initializeAI();
                }
                
                // Focus on input field
                setTimeout(() => userInput.focus(), 100);
                
                // Add animation
                chatbotContainer.classList.add('animate__animated', 'animate__fadeInUp');
                setTimeout(() => chatbotContainer.classList.remove('animate__animated', 'animate__fadeInUp'), 1000);
            });
            
            minimizeButton.addEventListener('click', () => {
                chatbotContainer.classList.add('animate__animated', 'animate__fadeOutDown');
                setTimeout(() => {
                    chatbotContainer.style.display = 'none';
                    chatbotContainer.classList.remove('animate__animated', 'animate__fadeOutDown');
                    toggleChatbotButton.style.display = 'block';
                }, 300);
            });
            
            imageInput.addEventListener('change', () => {
                if (imageInput.files.length > 0) {
                    const fileCount = imageInput.files.length;
                    customFileLabel.textContent = fileCount === 1 
                        ? imageInput.files[0].name 
                        : `${fileCount} images selected`;
                } else {
                    customFileLabel.textContent = 'Choose Images';
                }
            });
            
            // Check for browser support issues
            if (typeof window.structuredClone !== 'function') {
                console.warn("Your browser may have compatibility issues with this chatbot. Please use a modern browser for the best experience.");
            }
            
            // Detect and warn about mobile data usage
            if (navigator.connection && navigator.connection.saveData) {
                console.warn("Data saver mode is enabled. Image uploads in the chatbot may use significant data.");
            }
        }
        
        // --- Accessibility Enhancements ---
        function enhanceAccessibility() {
            // Add ARIA support
            document.addEventListener('keydown', function(event) {
                // ESC key closes the chatbot
                if (event.key === 'Escape' && chatbotContainer.style.display === 'block') {
                    minimizeButton.click();
                }
                
                // Alt+C opens the chatbot
                if (event.altKey && event.key === 'c' && chatbotContainer.style.display === 'none') {
                    toggleChatbotButton.click();
                }
            });
            
            // Add focus trap within chatbot when open
            userInput.addEventListener('keydown', function(event) {
                if (event.key === 'Tab' && !event.shiftKey) {
                    if (document.activeElement === sendButton) {
                        event.preventDefault();
                        imageInput.focus();
                    }
                }
            });
            
            imageInput.addEventListener('keydown', function(event) {
                if (event.key === 'Tab' && event.shiftKey) {
                    if (document.activeElement === imageInput) {
                        event.preventDefault();
                        sendButton.focus();
                    }
                }
            });
        }
        
        // --- Error Handling ---
        function setupErrorHandling() {
            window.addEventListener('error', function(event) {
                console.error('Global error:', event.error);
                
                // Only display errors related to our chatbot
                if (event.filename && event.filename.includes('generative-ai')) {
                    displayMessage("‚ö†Ô∏è An error occurred with the AI service. Please try again later.", 'bot');
                }
                
                return false;
            });
            
            // Handle unhandled promise rejections
            window.addEventListener('unhandledrejection', function(event) {
                console.error('Unhandled promise rejection:', event.reason);
                
                if (event.reason && (
                    event.reason.toString().includes('API key') || 
                    event.reason.toString().includes('network') ||
                    event.reason.toString().includes('timeout')
                )) {
                    displayMessage("‚ö†Ô∏è Connection issue with the AI service. Please check your internet connection and try again.", 'bot');
                }
                
                return false;
            });
        }
        
        // --- Performance Optimization ---
        function optimizePerformance() {
            // Debounce scroll events
            let scrollTimeout;
            chatLog.addEventListener('scroll', function() {
                if (scrollTimeout) {
                    clearTimeout(scrollTimeout);
                }
                
                scrollTimeout = setTimeout(function() {
                    // Additional scroll-based optimizations could go here
                }, 100);
            });
            
            // Lazy load images in chat responses
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && entry.target.tagName === 'IMG' && entry.target.dataset.src) {
                        entry.target.src = entry.target.dataset.src;
                        entry.target.removeAttribute('data-src');
                        observer.unobserve(entry.target);
                    }
                });
            });
            
            // Observe images as they're added to the chat
            new MutationObserver((mutations) => {
                mutations.forEach(mutation => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(node => {
                            if (node.nodeType === 1) { // Element node
                                const images = node.querySelectorAll('img[data-src]');
                                images.forEach(img => observer.observe(img));
                            }
                        });
                    }
                });
            }).observe(chatLog, { childList: true, subtree: true });
        }
        
        // --- Dark/Light Theme Toggle ---
        function setupThemeToggle() {
            // This could be expanded to add a theme toggle button
            // For now, we'll just detect system preference
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {
                // Apply light theme overrides if needed
                document.documentElement.setAttribute('data-theme', 'light');
            } else {
                document.documentElement.setAttribute('data-theme', 'dark');
            }
            
            // Listen for changes in system theme preference
            window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', event => {
                document.documentElement.setAttribute('data-theme', event.matches ? 'light' : 'dark');
            });
        }
        
        // --- Analytics Functionality ---
        function setupAnalytics() {
            // Only if user has consented to analytics
            const hasConsented = localStorage.getItem('analytics-consent') === 'true';
            
            if (hasConsented) {
                // Simple analytics tracking
                let messageCount = 0;
                let sessionStartTime = Date.now();
                
                // Track message counts
                const trackMessage = (role) => {
                    messageCount++;
                    
                    // Example analytics event - implement your own tracking here
                    console.log(`Analytics: ${role} message #${messageCount}, session duration: ${Math.floor((Date.now() - sessionStartTime) / 1000)}s`);
                    
                    // You could send this data to your analytics service here
                };
                
                // Monkey patch displayMessage to track analytics
                const originalDisplayMessage = displayMessage;
                displayMessage = function(text, role, messageId = null) {
                    trackMessage(role);
                    return originalDisplayMessage(text, role, messageId);
                };
            }
        }
        
        // --- Initialize Everything ---
        document.addEventListener('DOMContentLoaded', function() {
            initializeChatbot();
            enhanceAccessibility();
            setupErrorHandling();
            optimizePerformance();
            setupThemeToggle();
            setupAnalytics();
            
            // Check if user has previously opened the chatbot in this session
            const chatbotSeen = sessionStorage.getItem('chatbot-seen');
            
            if (!chatbotSeen) {
                // Show a welcome tooltip the first time
                const tooltip = document.createElement('div');
                tooltip.innerHTML = 'Need help? Chat with our AI assistant!';
                tooltip.style.position = 'fixed';
                tooltip.style.bottom = '80px';
                tooltip.style.right = '20px';
                tooltip.style.background = 'var(--primary-color)';
                tooltip.style.color = 'white';
                tooltip.style.padding = '10px 15px';
                tooltip.style.borderRadius = '8px';
                tooltip.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
                tooltip.style.zIndex = '998';
                tooltip.style.animation = 'fadeIn 0.5s ease-out forwards';
                
                document.body.appendChild(tooltip);
                
                setTimeout(() => {
                    tooltip.style.animation = 'fadeOut 0.5s ease-out forwards';
                    setTimeout(() => tooltip.remove(), 500);
                }, 5000);
                
                sessionStorage.setItem('chatbot-seen', 'true');
            }
        });
    </script>
</body>
</html>

alreadycheckedin.php
<?php
// Purpose: Display a message when the user has already checked in.
// Redirects to index.php after 5 seconds.

// Start the session to access any error messages
session_start();

// Include required files for consistent functionality
require_once 'Dashboard/config.php';
require_once 'Dashboard/error_handler.php';

// Language Handling to match the rest of your application
if (!isset($_SESSION['lang'])) {
    $_SESSION['lang'] = 'en'; // Default to English
}

if (isset($_GET['lang']) && in_array($_GET['lang'], ['en', 'de'])) {
    $_SESSION['lang'] = $_GET['lang'];
}

$langFile = 'languages/' . $_SESSION['lang'] . '.php';
if (file_exists($langFile)) {
    $translations = include $langFile;
} else {
    $translations = include 'languages/en.php'; // Fallback to English
}

// Get username if available
$username = isset($_SESSION['user_name']) ? htmlspecialchars($_SESSION['user_name']) : 'User';
?>
<!DOCTYPE html>
<html lang="<?php echo $_SESSION['lang'] ?? 'en'; ?>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $translations['already_checked_in_title'] ?? 'Already Checked In'; ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --asb-red: #d40612;
            --asb-yellow: #ffee00;
        }
        
        body {
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Roboto', sans-serif;
        }
        
        .container {
            margin-top: 50px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            max-width: 500px;
            text-align: center;
        }
        
        .countdown {
            font-weight: bold;
            color: var(--asb-red);
            font-size: 1.2rem;
            margin-top: 10px;
        }
        
        /* ASB branding colors */
        .text-danger {
            color: var(--asb-red) !important;
        }
        
        .btn-primary {
            background-color: var(--asb-red);
            border-color: var(--asb-red);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: #b00510;
            border-color: #b00510;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(212, 6, 18, 0.3);
        }
    </style>
    <script>
        // Redirect to index.php after 5 seconds with countdown
        let secondsLeft = 5;
        
        function updateCountdown() {
            const countdownElement = document.getElementById('countdown');
            secondsLeft--;
            
            if (secondsLeft <= 0) {
                window.location.href = "index.php";
            } else {
                countdownElement.textContent = secondsLeft;
                setTimeout(updateCountdown, 1000);
            }
        }
        
        // Initialize countdown when page loads
        window.onload = function() {
            updateCountdown();
        };
        
        // Backup redirect in case the countdown fails
        setTimeout(function() {
            window.location.href = "index.php";
        }, 5500);
    </script>
</head>
<body>
    <div class="container">
        <h1 class="mb-4 text-danger"><?php echo $translations['already_checked_in_title'] ?? 'Already Checked In!'; ?></h1>
        <p class="lead">
            <?php 
            $messageTemplate = $translations['already_checked_in'] ?? 'Hello, %s! You have already checked in today.';
            // Handle both {name} and %s formats that appear in your translation files
            if (strpos($messageTemplate, '{name}') !== false) {
                echo str_replace('{name}', $username, $messageTemplate);
            } else {
                echo sprintf($messageTemplate, $username);
            }
            ?>
        </p>
        <p><?php echo $translations['already_checked_in_message'] ?? 'You will be redirected to the home page in'; ?> <span id="countdown" class="countdown">5</span> <?php echo $translations['seconds'] ?? 'seconds'; ?>.</p>
        <button class="btn btn-primary mt-3" onclick="window.location.href='index.php';"><?php echo $translations['go_back_now'] ?? 'Go Back Now'; ?></button>
    </div>
    
    <?php if (isset($_SESSION['error_message'])): ?>
    <div class="alert alert-danger mt-3" role="alert">
        <?php echo htmlspecialchars($_SESSION['error_message']); ?>
        <?php unset($_SESSION['error_message']); ?>
    </div>
    <?php endif; ?>
</body>
</html>


Asterisk.php
<?php
// Configuration for the contacts database
include 'Dashboard/config.php'; // Adjust path as needed

// Create database connection
$contacts_conn = new mysqli(
    $contacts_db_config['servername'],
    $contacts_db_config['username'],
    $contacts_db_config['password'],
    $contacts_db_config['database']
);

if ($contacts_conn->connect_error) {
    error_log("Contacts DB Connection failed: " . $contacts_conn->connect_error);
    echo "Failed to connect to contacts database.\n";
    exit(1);
}

// AMI configuration
$ami_config = [
    'host'     => '10.24.100.20', // Update as per your setup
    'port'     => 5038,
    'username' => 'mark',         // Update as per your AMI user
    'password' => 'Bremen2025'     // Update as per your AMI password
];

// Fetch contacts with multiple phone numbers
$contacts = [];
$sql = "SELECT id, phone_number1, phone_number2, phone_number3, duration FROM contacts ORDER BY id";
try {
    $result = $contacts_conn->query($sql);
    if (!$result) throw new Exception($contacts_conn->error);
    while ($row = $result->fetch_assoc()) {
        $contacts[] = $row;
    }
    $result->free();
} catch (Exception $e) {
    error_log("Error fetching contacts: " . $e->getMessage());
    echo "Error fetching contacts: " . $e->getMessage() . "\n";
    exit(1);
}

echo "Fetched " . count($contacts) . " contacts successfully.\n";

// Connect to Asterisk AMI
$socket = fsockopen($ami_config['host'], $ami_config['port'], $errno, $errstr, 30);
if (!$socket) {
    echo "AMI connection failed: $errstr ($errno)\n";
    exit(1);
}

// Login to AMI
fputs($socket, "Action: Login\r\n");
fputs($socket, "Username: {$ami_config['username']}\r\n");
fputs($socket, "Secret: {$ami_config['password']}\r\n\r\n");

// Read and ignore initial events (like FullyBooted)
while ($line = fgets($socket)) {
    if (trim($line) === "") {
        break;
    }
}
echo "AMI login successful.\n";

// Audio file to play (if needed)
$audio_file = 'Sound.mp3'; // Adjust if needed

// Process each contact
foreach ($contacts as $contact) {
    $id = $contact['id'];
    echo "Processing contact ID {$id}...\n";

    // Collect and filter phone numbers
    $numbers = array_filter([
        $contact['phone_number1'],
        $contact['phone_number2'],
        $contact['phone_number3']
    ], function($num) { return !empty($num); });

    if (empty($numbers)) {
        echo "No valid phone numbers for contact ID {$id}\n";
        $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, 'NO_NUMBERS', NOW())";
        $stmt = $contacts_conn->prepare($log_sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
        continue;
    }

    // Prepare variables for Asterisk
    $variables = [
        "contact_id={$id}",
        "AUDIO_FILE={$audio_file}"
    ];
    $i = 1;
    foreach ($numbers as $number) {
        $variables[] = "number{$i}={$number}";
        $i++;
        if ($i > 3) break;
    }

    // Generate a unique ActionID for this originate command
    $actionID = "call_{$id}_" . time();

    // Use Local/100@default/n as the channel.
    // /n verhindert, dass Asterisk erneut den Dialplan auswertet, was sonst zum Fehler "Extension does not exist" f√ºhren kann.
    // Stelle sicher, dass deine Dialplan-Konfiguration (Extension 100 im Kontext [default]) korrekt geladen wurde.
    $originateCmd  = "Action: Originate\r\n";
    $originateCmd .= "Channel: PJSIP/004942143812199@easybell\r\n";
    $originateCmd .= "Context: default\r\n";
    $originateCmd .= "Exten: 100\r\n";
    $originateCmd .= "Priority: 1\r\n";
    $originateCmd .= "Variable: " . implode(',', $variables) . "\r\n";
    $originateCmd .= "CallerID: YourCallerID <1234567890>\r\n"; // Update CallerID as needed
    $originateCmd .= "Async: yes\r\n";
    $originateCmd .= "ActionID: {$actionID}\r\n\r\n";

    fputs($socket, $originateCmd);

    // Wait for response matching our ActionID (timeout after 300 sec)
    $start_time = time();
    $responseReceived = false;
    $fullResponse = "";
    while ((time() - $start_time) < 300) {
        $line = fgets($socket);
        if ($line === false) {
            sleep(1);
            continue;
        }
        $fullResponse .= $line;
        // A blank line indicates end of a response block
        if (trim($line) === "") {
            if (strpos($fullResponse, "ActionID: {$actionID}") !== false) {
                if (strpos($fullResponse, 'Response: Success') !== false) {
                    echo "Contact ID {$id} call originated successfully.\n";
                    $log_status = 'ANSWERED';
                } else {
                    echo "Failed to originate call for contact ID {$id}: $fullResponse\n";
                    $log_status = 'ORIGINATE_FAILED';
                }
                $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, ?, NOW())";
                $stmt = $contacts_conn->prepare($log_sql);
                $stmt->bind_param("is", $id, $log_status);
                $stmt->execute();
                $stmt->close();
                $responseReceived = true;
                break;
            }
            $fullResponse = "";
        }
    }

    if (!$responseReceived) {
        echo "Timeout waiting for response for contact ID {$id}\n";
        $log_sql = "INSERT INTO call_log (contact_id, status, call_time) VALUES (?, 'TIMEOUT', NOW())";
        $stmt = $contacts_conn->prepare($log_sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }
}

// Logout from AMI and cleanup
fputs($socket, "Action: Logoff\r\n\r\n");
fclose($socket);
$contacts_conn->close();

echo "Call campaign completed.\n";
?>





index.php
<?php
// Purpose: Main dashboard for user presence submission.
session_start();

require 'Dashboard/config.php';
require_once 'Dashboard/error_handler.php'; // Use centralized error handling
require_once 'Dashboard/time_range.php'; // Include time range logic

// Language Handling
if (!isset($_SESSION['lang'])) {
    $_SESSION['lang'] = 'en'; // Default to English
}

if (isset($_GET['lang']) && in_array($_GET['lang'], ['en', 'de'])) {
    $_SESSION['lang'] = $_GET['lang'];
}

$langFile = 'languages/' . $_SESSION['lang'] . '.php';
if (file_exists($langFile)) {
    $translations = include $langFile;
} else {
    $translations = include 'languages/en.php'; // Fallback to English
}

// Get today's date and initialize variables
$today = date('Y-m-d');
$alreadyLoggedIn = false;
$userName = '';
$checkInTime = '';

try {
    // Get user's name from the session if available
    if (isset($_SESSION['user_name'])) {
        $userName = $_SESSION['user_name'];
        
        // Check if this specific user has logged in today
        $stmt = $conn->prepare("SELECT name, time FROM presencetable WHERE name = ? AND date = ?");
        if (!$stmt) {
            throw new Exception("Prepare failed: " . $conn->error);
        }
        
        $stmt->bind_param("ss", $userName, $today);
        if (!$stmt->execute()) {
            throw new Exception("Execute failed: " . $stmt->error);
        }
        
        $result = $stmt->get_result();
        
        // Check if the user is already logged in today
        if ($row = $result->fetch_assoc()) {
            $alreadyLoggedIn = true;
            $checkInTime = $row['time'];
        }
        
        $stmt->close();
    }
} catch (Exception $e) {
    handleError("Database Error", $e->getMessage(), null, true);
}

// Disable submit button if:
// 1. User already logged in today, OR
// 2. Outside of allowed time range
$disableSubmit = $alreadyLoggedIn || !$timeRangeInfo['is_in_range'];

// Include header
include 'Dashboard/header.php';
?>

<div class="container my-4">
    <div class="row">
        <div class="col-lg-12">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h1 class="h3 mb-0"><?php echo $translations['dashboard']; ?></h1>
                </div>
                <div class="card-body">
                    <div class="welcome-section mb-4 text-center">
                        <p class="lead"><?php echo $translations['welcome_message']; ?></p>
                        
                        <!-- Display current time and system status -->
                        <div class="alert <?php echo $timeRangeInfo['is_in_range'] ? 'alert-success' : 'alert-warning'; ?> d-inline-block">
                            <strong>System Status:</strong> 
                            <?php echo $timeRangeInfo['is_in_range'] ? 'Active' : 'Inactive'; ?>
                            (<?php echo substr($timeRangeInfo['start_time'], 0, 5) . ' - ' . substr($timeRangeInfo['end_time'], 0, 5); ?>)
                        </div>
                    </div>
                    
                    <?php echo displayError(); // Display any errors from the session ?>
                    
                    <?php if ($alreadyLoggedIn): ?>
                        <div class="alert alert-success text-center" role="alert">
                            <h4 class="alert-heading">Already Checked In!</h4>
                            <p><?php echo sprintf($translations['already_checked_in'], htmlspecialchars($userName)); ?></p>
                            <hr>
                            <p class="mb-0">You checked in today at <strong><?php echo $checkInTime; ?></strong></p>
                        </div>
                    <?php else: ?>
                        <div class="presence-form mx-auto" style="max-width: 400px;">
                            <div class="card shadow-sm">
                                <div class="card-body">
                                    <h4 class="card-title text-center mb-4">Check-In Form</h4>
                                    
                                    <?php if (!$timeRangeInfo['is_in_range']): ?>
                                        <div class="alert alert-warning text-center">
                                            <i class="fas fa-clock me-2"></i> Check-in is currently closed.
                                            <br>Available hours: <?php echo substr($timeRangeInfo['start_time'], 0, 5) . ' - ' . substr($timeRangeInfo['end_time'], 0, 5); ?>
                                        </div>
                                    <?php endif; ?>
                                    
                                    <form action="presence_request.php" method="POST" novalidate>
                                        <div class="mb-3">
                                            <label for="formGroupExampleInput" class="form-label">
                                                <?php echo $translations['name']; ?>
                                            </label>
                                            <input type="text"
                                                   class="form-control form-control-lg"
                                                   id="formGroupExampleInput"
                                                   name="fname"
                                                   placeholder="<?php echo $translations['enter_your_name']; ?>"
                                                   value="<?php echo htmlspecialchars($userName); ?>"
                                                   required
                                                   pattern="[A-Za-z ]{2,50}"
                                                   title="<?php echo $translations['name_validation_title']; ?>"
                                                   <?php echo $disableSubmit ? 'disabled' : ''; ?>>
                                            <div class="form-text">Please enter your full name (2-50 characters, letters only).</div>
                                        </div>
                                        <button type="submit" 
                                                class="btn btn-primary btn-lg w-100" 
                                                style="background-color: #d40612; border-color: #d40612;" 
                                                <?php echo $disableSubmit ? 'disabled' : ''; ?>>
                                            <?php echo $translations['submit']; ?>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
</div>

<?php
include 'Dashboard/footer.php';
?>

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(135deg, #f8f9fa, #ffffff);
    }
    .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 10px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }
    .form-control:focus {
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        border-color: #dc3545;
    }
    .btn-primary {
        background-color: #dc3545;
        border-color: #dc3545;
        transition: transform 0.2s ease, background-color 0.2s ease;
        border-radius: 10px;
    }
    .btn-primary:hover {
        transform: translateY(-2px);
        background-color: #c82333;
        border-color: #c82333;
    }
    .alert {
        border-radius: 10px;
        animation: fadeIn 0.5s ease;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>


isheretoday.php
<?php
include 'authSystem/auth_check.php'; // Enforce login
// Purpose: Display a list of users who have checked in today.

// Include required files
require 'Dashboard/config.php';      // Database configuration
require 'Dashboard/time_range.php';  // Time range functionality
require_once 'Dashboard/error_handler.php'; // Error handling
include 'Dashboard/header.php';      // Page header

// Get current date
$today = date('Y-m-d');
$currentTime = date('H:i');

// Prepare and execute query to get today's presence records with proper error handling
try {
    // More detailed query to get all relevant information
    $sql = "SELECT name, here, time, 
           CASE 
               WHEN here = 1 THEN 'Present' 
               ELSE 'Not Present' 
           END AS status_text
           FROM presencetable 
           WHERE date = ? 
           ORDER BY time DESC";
    
    $stmt = $conn->prepare($sql);
    if (!$stmt) {
        throw new Exception("Prepare failed: " . $conn->error);
    }
    
    $stmt->bind_param('s', $today);
    if (!$stmt->execute()) {
        throw new Exception("Execute failed: " . $stmt->error);
    }
    
    $result = $stmt->get_result();
    $recordCount = $result->num_rows;
    
} catch (Exception $e) {
    handleError("Database Error", $e->getMessage(), null, true);
    $result = null; // Set result to null to avoid errors later
    $recordCount = 0;
}
?>

<div class="container my-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">Today's Presence</h3>
                    <span class="badge bg-light text-dark">
                        <?php echo date('l, F j, Y'); ?> | Current Time: <?php echo $currentTime; ?>
                    </span>
                </div>
                <div class="card-body">
                    <div class="alert alert-info mb-4" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        Welcome to the presence tracking system. Here you can see who is present today.
                        <?php if ($timeRangeInfo['is_in_range']): ?>
                            <span class="badge bg-success ms-2">System Active</span>
                        <?php else: ?>
                            <span class="badge bg-warning text-dark ms-2">System Inactive</span>
                        <?php endif; ?>
                    </div>
                    
                    <?php echo displayError(); // Display any errors ?>
                    
                    <?php if ($result && $recordCount > 0): ?>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover align-middle">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Check-in Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php 
                                    $counter = 1;
                                    while ($row = $result->fetch_assoc()): 
                                    ?>
                                    <tr>
                                        <td><?php echo $counter++; ?></td>
                                        <td><?php echo htmlspecialchars($row['name']); ?></td>
                                        <td>
                                            <?php if ($row['here']): ?>
                                                <span class="badge bg-success">Present</span>
                                            <?php else: ?>
                                                <span class="badge bg-danger">Not Present</span>
                                            <?php endif; ?>
                                        </td>
                                        <td><?php echo htmlspecialchars($row['time']); ?></td>
                                    </tr>
                                    <?php endwhile; ?>
                                </tbody>
                            </table>
                        </div>
                        <div class="alert alert-success mt-3">
                            <strong>Total check-ins today:</strong> <?php echo $recordCount; ?>
                        </div>
                    <?php else: ?>
                        <div class="alert alert-warning" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            No sign-ins recorded for today yet.
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
</div>

<?php
// Clean up resources
if (isset($stmt)) {
    $stmt->close();
}
include 'Dashboard/footer.php';
?>


presence_request.php
<?php
session_start();
// Include configuration and required files
require 'Dashboard/config.php';
require_once 'Dashboard/error_handler.php';
require_once 'Dashboard/time_range.php'; // Use existing time range logic

try {
    // Check if form was submitted
    if ($_SERVER["REQUEST_METHOD"] !== "POST") {
        throw new Exception("Invalid request method");
    }
    
    // Sanitize and validate input
    $name = isset($_POST['fname']) ? trim($_POST['fname']) : '';
    
    // More comprehensive name validation
    if (empty($name)) {
        throw new Exception("Name is required");
    }
    
    if (strlen($name) < 2 || strlen($name) > 50) {
        throw new Exception("Name must be between 2 and 50 characters");
    }
    
    if (!preg_match("/^[A-Za-z\s]+$/", $name)) {
        throw new Exception("Name can only contain letters and spaces");
    }
    
    // Additional sanitization before database insertion
    $name = htmlspecialchars($name, ENT_QUOTES, 'UTF-8');
    
    // Set timezone and get current date/time
    date_default_timezone_set('Europe/Berlin');
    $time = date('H:i');
    $date = date('Y-m-d');
    
    // Use the time range info from the imported time_range.php
    $ishere = $timeRangeInfo['is_in_range'] ? 1 : 0;
    $status = $ishere ? "Is here" : "Is not here";
    
    // Check if user already logged in today
    $checkStmt = $conn->prepare("SELECT COUNT(*) as count FROM presencetable WHERE name = ? AND date = ?");
    if (!$checkStmt) {
        throw new Exception("Database preparation error: " . $conn->error);
    }
    
    $checkStmt->bind_param("ss", $name, $date);
    if (!$checkStmt->execute()) {
        throw new Exception("Database execution error: " . $checkStmt->error);
    }
    
    $result = $checkStmt->get_result();
    $row = $result->fetch_assoc();
    $checkStmt->close();
    
    if ($row['count'] > 0) {
        // Store name in session for personalized message
        $_SESSION['user_name'] = $name;
        
        // Redirect to already checked in page
        header("Location: alreadycheckedin.php");
        exit();
    } else {
        // Insert presence record
        $stmt = $conn->prepare("INSERT INTO presencetable (name, here, date, time) VALUES (?, ?, ?, ?)");
        if (!$stmt) {
            throw new Exception("Database preparation error: " . $conn->error);
        }
        
        $stmt->bind_param("siss", $name, $ishere, $date, $time);
        if (!$stmt->execute()) {
            throw new Exception("Database execution error: " . $stmt->error);
        }
        
        // Store user info in session
        $_SESSION['user_name'] = $name;
        $_SESSION['last_checkin'] = $date;
        $_SESSION['checkin_time'] = $time;
        $_SESSION['checkin_status'] = $status;
        
        // Redirect to success page
        header("Location: success.php");
        exit();
    }
} catch (Exception $e) {
    // Use the centralized error handler
    handleError("Check-in Error", $e->getMessage(), "index.php", true);
    exit();
} finally {
    // Ensure database connection is closed
    if (isset($conn) && $conn) {
        $conn->close();
    }
}


sort.py
import os

def process_files_in_directory(directory, output_file):
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Walk through the directory and subdirectories
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                
                # Only process files (you can filter out certain file types if needed)
                if os.path.isfile(file_path):
                    try:
                        # Open each file and read its content
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            file_content = f.read()

                        # Write the filename and its content to the output file
                        # We will include both the relative file path and its content
                        relative_path = os.path.relpath(file_path, directory)
                        outfile.write(f"{relative_path}\n{file_content}\n\n")
                        
                    except Exception as e:
                        print(f"Error reading file {file_path}: {e}")
        
    print(f"All files have been processed and written to {output_file}")

if __name__ == "__main__":
    # Get the current directory
    current_directory = os.getcwd()
    
    # Define the output file
    output_filename = "combined_file_contents.txt"
    
    # Process files
    process_files_in_directory(current_directory, output_filename)


success.php
<?php
// Purpose: Display a success message when the user successfully checks in for the day.
// Redirects to index.php after 10 seconds.

// Include required files
require_once 'Dashboard/config.php';      // Database configuration
require_once 'Dashboard/error_handler.php'; // Error handling

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Language Handling
if (!isset($_SESSION['lang'])) {
    $_SESSION['lang'] = 'en'; // Default to English
}

if (isset($_GET['lang']) && in_array($_GET['lang'], ['en', 'de'])) {
    $_SESSION['lang'] = $_GET['lang'];
}

$langFile = 'languages/' . $_SESSION['lang'] . '.php';
if (file_exists($langFile)) {
    $translations = include $langFile;
} else {
    $translations = include 'languages/en.php'; // Fallback to English
}

// Retrieve user data from session
$userName = isset($_SESSION['user_name']) ? htmlspecialchars($_SESSION['user_name']) : ($translations['user'] ?? 'User');
$checkInTime = isset($_SESSION['checkin_time']) ? htmlspecialchars($_SESSION['checkin_time']) : ($translations['unknown_time'] ?? 'Unknown time');
$checkInStatus = isset($_SESSION['checkin_status']) ? htmlspecialchars($_SESSION['checkin_status']) : '';

// Set page title and description
$pageTitle = $translations['success_checked_in'] ?? 'Check-In Success';
$pageDescription = sprintf($translations['success_thank_you'] ?? 'Thank you, %s! You will be redirected shortly.', $userName);

// Include header
include 'Dashboard/header.php';
?>

<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white text-center">
                    <h2 class="h4 mb-0"><?php echo $pageTitle; ?></h2>
                </div>
                <div class="card-body text-center">
                    <p class="lead">
                        <?php echo sprintf($translations['success_thank_you'] ?? 'Thank you, %s! Your presence has been recorded.', htmlspecialchars($userName)); ?>
                    </p>
                    
                    <div class="user-details my-4 p-3 bg-light rounded">
                        <p class="mb-1"><strong><?php echo $translations['date'] ?? 'Date'; ?>:</strong> <?php echo date('l, F j, Y'); ?></p>
                        <p class="mb-1"><strong><?php echo $translations['time'] ?? 'Time'; ?>:</strong> <?php echo $checkInTime; ?></p>
                        <p class="mb-0"><strong><?php echo $translations['status'] ?? 'Status'; ?>:</strong> <?php echo $checkInStatus; ?></p>
                    </div>
                    
                    <p>
                        <?php echo $translations['success_redirect'] ?? 'You will be redirected to the home page in'; ?> 
                        <span id="countdown" class="fw-bold text-success">10</span> 
                        <?php echo $translations['seconds'] ?? 'seconds'; ?>.
                    </p>
                    <button class="btn btn-primary mt-3" onclick="window.location.href='index.php';">
                        <?php echo $translations['go_back_now'] ?? 'Go Back Now'; ?>
                    </button>
                </div>
            </div>
            
            <?php echo displayError(); // Display any errors using centralized error handler ?>
        </div>
    </div>
</div>

<script>
    // Redirect to index.php after 10 seconds with countdown
    let secondsLeft = 10;
    
    function updateCountdown() {
        const countdownElement = document.getElementById('countdown');
        secondsLeft--;
        
        if (secondsLeft <= 0) {
            window.location.href = "index.php";
        } else {
            countdownElement.textContent = secondsLeft;
            setTimeout(updateCountdown, 1000);
        }
    }
    
    // Initialize countdown when page loads
    window.onload = function() {
        updateCountdown();
    };
    
    // Backup redirect in case the countdown fails
    setTimeout(function() {
        window.location.href = "index.php";
    }, 10500);
</script>

<?php
// Include footer
include 'Dashboard/footer.php';
?>


time_settings.php
<?php
include 'authSystem/auth_check.php'; // Enforce login
require_once 'Dashboard/config.php'; // Database configuration (defines $conn)
require 'TimeSettings/setgettime.php'; // Time setting logic (defines $days, $settings, etc.)
include 'Dashboard/header.php'; // Page header

// Error handling for missing files and configuration
if (!file_exists('Dashboard/config.php')) {
    die("Error: Configuration file not found!");
}

// Define default values in case they're not set in included files
if (!isset($days)) {
    $days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
}
if (!isset($settings)) {
    $settings = [];
}

// Define default time settings if not already defined

$message = ""; // Initialize message for feedback
$messageType = ""; // Initialize message type (success, warning, info)
$pageTitle = "Configure Login Time Limits";
$pageDescription = "Set login time restrictions for each day of the week.";

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['save_hours'])) {
    // Validate input values
    $dayIndex = isset($_POST['day_index']) ? intval($_POST['day_index']) : 0;
    
    if ($dayIndex < 0 || $dayIndex >= count($days)) {
        $message = "Invalid day index provided.";
        $messageType = "danger";
    } else {
        $dayName = $days[$dayIndex];
        $isClosed = isset($_POST['closed_' . $dayIndex]) ? 1 : 0;
        
        // Validate time format before processing
        $timePattern = '/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/';
        $startTimeValid = $isClosed || (isset($_POST['start_time_' . $dayIndex]) && 
                         preg_match($timePattern, $_POST['start_time_' . $dayIndex]));
        $endTimeValid = $isClosed || (isset($_POST['end_time_' . $dayIndex]) && 
                       preg_match($timePattern, $_POST['end_time_' . $dayIndex]));
        
        if (!$startTimeValid || !$endTimeValid) {
            $message = "Invalid time format provided.";
            $messageType = "danger";
        } else {
            $startTime = $isClosed ? "00:00:00" : $_POST['start_time_' . $dayIndex] . ":00";
            $endTime = $isClosed ? "00:00:00" : $_POST['end_time_' . $dayIndex] . ":00";
            
            // Validate end time is after start time
            if (!$isClosed && $startTime >= $endTime) {
                $message = "End time must be later than start time for $dayName.";
                $messageType = "warning";
            } else {
                // Check if there are any actual changes
                $currentSetting = $settings[$dayName] ?? ['start_time' => DEFAULT_START_TIME, 'end_time' => DEFAULT_END_TIME];
                $currentIsClosed = ($currentSetting['start_time'] === '00:00:00' && $currentSetting['end_time'] === '00:00:00');
                
                if (($isClosed && $currentIsClosed) || 
                    (!$isClosed && !$currentIsClosed && 
                     $currentSetting['start_time'] === $startTime && 
                     $currentSetting['end_time'] === $endTime)) {
                    $message = "No changes detected for $dayName.";
                    $messageType = "info";
                } else {
                    // Update the database
                    $sql = "UPDATE timesettings SET start_time = ?, end_time = ? WHERE day_name = ?";
                    $stmt = $conn->prepare($sql);
                    
                    if ($stmt) {
                        $stmt->bind_param("sss", $startTime, $endTime, $dayName);
                        
                        if ($stmt->execute()) {
                            if ($isClosed) {
                                $message = "$dayName has been marked as closed.";
                            } else {
                                $message = "Time settings for $dayName updated successfully! New hours: " . 
                                           substr($startTime, 0, 5) . " to " . substr($endTime, 0, 5);
                            }
                            $messageType = "success";
                            
                            // Update local settings array to reflect changes
                            $settings[$dayName] = ['start_time' => $startTime, 'end_time' => $endTime];
                        } else {
                            $message = "Error updating time settings for $dayName: " . $stmt->error;
                            $messageType = "danger";
                        }
                        $stmt->close();
                    } else {
                        $message = "Error preparing statement: " . $conn->error;
                        $messageType = "danger";
                    }
                }
            }
        }
    }
}

// Get current time info
$currentTime = date('H:i:s');
$currentDay = date('l');
$currentDayIndex = intval(date('w')); // Convert to integer for proper comparison
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="<?php echo htmlspecialchars($pageDescription); ?>">
    <title><?php echo htmlspecialchars($pageTitle); ?></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/modern-normalize@v3.0.1/modern-normalize.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="icon" href="favicon.png">
    <!-- Consider moving this CSS to an external file for better performance -->
    <style>
        :root {
            --primary-color: #d40612;
            --primary-hover: #b00510;
            --primary-light: #ff4d57;
            --primary-ultra-light: #ffe6e7;
            --bg-light: #f8f9fa;
            --bg-gradient: linear-gradient(135deg, #f8f9fa, #e9ecef);
            --card-shadow: 0 8px 20px rgba(0,0,0,0.1);
            --transition-speed: 0.3s;
            --border-radius: 0.75rem;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-gradient);
            min-height: 100vh;
            padding-bottom: 2rem;
        }
        
        /* Header Styles */
        .page-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #dee2e6;
            position: relative;
        }
        
        .page-header::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100px;
            height: 3px;
            background-color: var(--primary-color);
        }
        
        /* Card Styles */
        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            transition: transform var(--transition-speed), box-shadow var(--transition-speed);
            overflow: hidden;
            margin-bottom: 2rem;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.15);
        }
        
        .card-header {
            background-color: var(--primary-color);
            color: white;
            font-weight: 600;
            padding: 1rem 1.5rem;
            border-bottom: none;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-header .date-display {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .card-header .time-display {
            font-weight: bold;
            background-color: rgba(255,255,255,0.2);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            margin-left: 0.5rem;
        }
        
        /* Navigation Pills */
        .nav-pills {
            gap: 0.5rem;
            margin-bottom: 1.5rem;
            flex-wrap: nowrap;
            overflow-x: auto;
            padding-bottom: 0.5rem;
            scrollbar-width: thin;
        }
        
        .nav-pills::-webkit-scrollbar {
            height: 4px;
        }
        
        .nav-pills::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        .nav-pills::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 10px;
        }
        
        .nav-pills .nav-link {
            color: #495057;
            font-weight: 500;
            border-radius: 0.5rem;
            padding: 0.75rem 1.25rem;
            transition: all var(--transition-speed);
            white-space: nowrap;
            display: flex;
            align-items: center;
            border: 1px solid transparent;
        }
        
        .nav-pills .nav-link.active {
            background-color: var(--primary-color);
            color: white;
            box-shadow: 0 3px 6px rgba(212, 6, 18, 0.2);
        }
        
        .nav-pills .nav-link:hover:not(.active) {
            background-color: var(--primary-ultra-light);
            border-color: var(--primary-light);
        }
        
        .nav-pills .nav-link.today-tab {
            border: 1px solid var(--primary-color);
            position: relative;
        }
        
        .nav-pills .nav-link .badge {
            margin-left: 0.5rem;
            padding: 0.35em 0.65em;
            background-color: var(--primary-color);
        }
        
        /* Form Controls */
        .form-control {
            border-radius: 0.5rem;
            padding: 0.75rem;
            border: 1px solid #ced4da;
            transition: all var(--transition-speed);
        }
        
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(212, 6, 18, 0.25);
            border-color: var(--primary-color);
        }
        
        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        /* Buttons */
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border-radius: 0.5rem;
            transition: all var(--transition-speed);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(212, 6, 18, 0.3);
        }
        
        .btn-outline-secondary {
            border-color: #ced4da;
            color: #6c757d;
            transition: all var(--transition-speed);
        }
        
        .btn-outline-secondary:hover {
            background-color: #f8f9fa;
            border-color: #6c757d;
            transform: translateY(-2px);
        }
        
        /* Status Indicators */
        .alert {
            border-radius: 0.5rem;
            animation: slideDown 0.5s ease;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 600;
            display: inline-block;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all var(--transition-speed);
        }
        
        .status-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .status-open {
            background-color: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }
        
        .status-closed {
            background-color: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }
        
        /* Time Input Field */
        .time-input-container {
            position: relative;
        }
        
        .time-input-container .icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--primary-color);
            pointer-events: none;
            z-index: 2;
        }
        
        .time-input-container .form-control {
            padding-right: 2.5rem;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        /* Time Status Indicator */
        .time-status {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            margin-left: 1rem;
            font-weight: 500;
        }
        
        .time-status.active {
            background-color: rgba(40, 167, 69, 0.2);
            color: #155724;
        }
        
        .time-status.inactive {
            background-color: rgba(220, 53, 69, 0.2);
            color: #721c24;
        }
        
        .time-status .indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        
        .time-status.active .indicator {
            background-color: #28a745;
            animation: pulse 2s infinite;
        }
        
        .time-status.inactive .indicator {
            background-color: #dc3545;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .nav-pills {
                flex-wrap: nowrap;
                overflow-x: auto;
                padding-bottom: 1rem;
            }
            
            .nav-pills .nav-item {
                flex: 0 0 auto;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .card-header .date-display {
                margin-top: 0.5rem;
            }
            
            .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            
            .d-md-flex {
                flex-direction: column;
            }
        }
        
        /* Tab content transitions */
        .tab-pane {
            animation: fadeIn 0.5s ease;
        }
        
        /* Transitions for time field elements */
        .time-fields {
            transition: opacity var(--transition-speed), filter var(--transition-speed);
        }
        
        .time-fields.disabled {
            opacity: 0.5;
            filter: grayscale(50%);
        }
        
        /* Current time indicator */
        .current-time {
            font-weight: 600;
            color: var(--primary-color);
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <main class="time-settings">
        <div class="container py-4">
            <div class="page-header">
                <h1 class="display-5 fw-bold"><?php echo htmlspecialchars($pageTitle); ?></h1>
                <p class="lead"><?php echo htmlspecialchars($pageDescription); ?></p>
            </div>

            <?php if (!empty($message)): ?>
                <div class="alert alert-<?php echo $messageType; ?> shadow-sm alert-dismissible fade show" role="alert">
                    <i class="fas fa-<?php echo $messageType === 'success' ? 'check-circle' : ($messageType === 'info' ? 'info-circle' : 'exclamation-circle'); ?> me-2"></i>
                    <?php echo htmlspecialchars($message); ?>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <?php endif; ?>

            <div class="card">
                <div class="card-header">
                    <div class="d-flex align-items-center">
                        <span><i class="fas fa-clock me-2"></i>Time Settings</span>
                        <?php
                        // Check if current time is within today's time range
                        $todaySettings = $settings[$currentDay] ?? ['start_time' => DEFAULT_START_TIME, 'end_time' => DEFAULT_END_TIME];
                        $isInRange = ($currentTime >= $todaySettings['start_time'] && $currentTime <= $todaySettings['end_time']) && 
                                     !($todaySettings['start_time'] === '00:00:00' && $todaySettings['end_time'] === '00:00:00');
                        ?>
                        <div class="time-status <?php echo $isInRange ? 'active' : 'inactive'; ?>">
                            <span class="indicator"></span>
                            <span>System is <?php echo $isInRange ? 'ACTIVE' : 'INACTIVE'; ?></span>
                        </div>
                    </div>
                    <div class="date-display">
                        <span>Today is <?php echo date('l, F j, Y'); ?></span>
                        <span class="time-display" id="current-time"><?php echo date('H:i:s'); ?></span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Day Navigation -->
                    <ul class="nav nav-pills mb-4" id="day-tabs" role="tablist">
                        <?php foreach ($days as $index => $day): 
                            // Check if the day is set to "closed"
                            $daySettings = $settings[$day] ?? ['start_time' => DEFAULT_START_TIME, 'end_time' => DEFAULT_END_TIME];
                            $isClosed = ($daySettings['start_time'] === '00:00:00' && $daySettings['end_time'] === '00:00:00');
                            $isToday = ($index == $currentDayIndex); // Check if this is today
                        ?>
                            <li class="nav-item">
                                <a class="nav-link <?php echo $index === $currentDayIndex ? 'active' : ''; ?> <?php echo $isToday ? 'today-tab' : ''; ?>" 
                                   id="tab-<?php echo $index; ?>" 
                                   data-bs-toggle="pill" 
                                   href="#pane-<?php echo $index; ?>" 
                                   role="tab" 
                                   aria-controls="pane-<?php echo $index; ?>" 
                                   aria-selected="<?php echo $index === $currentDayIndex ? 'true' : 'false'; ?>">
                                    <?php echo htmlspecialchars($day); ?>
                                    <?php if ($isClosed): ?>
                                        <i class="fas fa-lock ms-1 text-danger" title="Closed" aria-hidden="true"></i>
                                        <span class="visually-hidden">Closed</span>
                                    <?php endif; ?>
                                    <?php if ($isToday): ?>
                                        <span class="badge bg-danger ms-1">Today</span>
                                    <?php endif; ?>
                                </a>
                            </li>
                        <?php endforeach; ?>
                    </ul>

                    <!-- Time Settings Panels -->
                    <div class="tab-content">
                        <?php foreach ($days as $index => $day): 
                            // Fetch or set default times for the day
                            $daySettings = $settings[$day] ?? ['start_time' => DEFAULT_START_TIME, 'end_time' => DEFAULT_END_TIME];
                            $startTime = $daySettings['start_time'] ?? DEFAULT_START_TIME;
                            $endTime = $daySettings['end_time'] ?? DEFAULT_END_TIME;
                            $isClosed = ($startTime === '00:00:00' && $endTime === '00:00:00');
                            $isToday = ($index == $currentDayIndex);
                        ?>
                            <div class="tab-pane fade <?php echo $index === $currentDayIndex ? 'show active' : ''; ?>" 
                                 id="pane-<?php echo $index; ?>" 
                                 role="tabpanel" 
                                 aria-labelledby="tab-<?php echo $index; ?>">
                                <form method="POST" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>" class="settings-form">
                                    <input type="hidden" name="day_index" value="<?php echo $index; ?>">
                                    
                                    <!-- Current Status Badge -->
                                    <div class="status-badge <?php echo $isClosed ? 'status-closed' : 'status-open'; ?>">
                                        <i class="fas fa-<?php echo $isClosed ? 'lock' : 'clock'; ?> me-2" aria-hidden="true"></i>
                                        <?php echo $day; ?> is currently <?php echo $isClosed ? 'CLOSED' : 'OPEN (' . substr($startTime, 0, 5) . ' - ' . substr($endTime, 0, 5) . ')'; ?>
                                        <?php if ($isToday && !$isClosed): ?>
                                            <span class="ms-2 small">(Current time: <span class="current-time" id="day-current-time"><?php echo date('H:i'); ?></span>)</span>
                                        <?php endif; ?>
                                    </div>

                                    <div class="mb-4 form-check">
                                        <input type="checkbox" class="form-check-input closed-checkbox" 
                                               id="closed_<?php echo $index; ?>" 
                                               name="closed_<?php echo $index; ?>" 
                                               <?php echo $isClosed ? 'checked' : ''; ?>>
                                        <label class="form-check-label" for="closed_<?php echo $index; ?>">
                                            <strong>Mark as Closed</strong> <small class="text-muted">(No check-ins will be allowed)</small>
                                        </label>
                                    </div>

                                    <div class="row time-fields <?php echo $isClosed ? 'disabled' : ''; ?>">
                                        <div class="col-md-6 mb-3">
                                            <label for="start_time_<?php echo $index; ?>" class="form-label fw-medium">
                                                <i class="fas fa-play-circle me-1 text-danger" aria-hidden="true"></i> Start Time
                                            </label>
                                            <div class="time-input-container">
                                                <input type="time" class="form-control time-input" 
                                                    id="start_time_<?php echo $index; ?>" 
                                                    name="start_time_<?php echo $index; ?>" 
                                                    value="<?php echo htmlspecialchars(substr($startTime, 0, 5)); ?>" 
                                                    <?php echo $isClosed ? 'disabled' : ''; ?>
                                                    required>
                                                <span class="icon" aria-hidden="true"><i class="fas fa-clock"></i></span>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <label for="end_time_<?php echo $index; ?>" class="form-label fw-medium">
                                                <i class="fas fa-stop-circle me-1 text-danger" aria-hidden="true"></i> End Time
                                            </label>
                                            <div class="time-input-container">
                                                <input type="time" class="form-control time-input" 
                                                    id="end_time_<?php echo $index; ?>" 
                                                    name="end_time_<?php echo $index; ?>" 
                                                    value="<?php echo htmlspecialchars(substr($endTime, 0, 5)); ?>" 
                                                    <?php echo $isClosed ? 'disabled' : ''; ?>
                                                    required>
                                                <span class="icon" aria-hidden="true"><i class="fas fa-clock"></i></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                                        <button type="reset" class="btn btn-outline-secondary me-md-2">
                                            <i class="fas fa-undo me-1" aria-hidden="true"></i> Reset
                                        </button>
                                        <button type="submit" name="save_hours" class="btn btn-primary">
                                            <i class="fas fa-save me-1" aria-hidden="true"></i> Save Changes
                                        </button>
                                    </div>
                                </form>
                            </div>
                        <?php endforeach; ?>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script>
        // Define days array at the beginning to avoid reference errors
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        
        document.addEventListener('DOMContentLoaded', () => {
            // Get today's day index (0 = Sunday, 6 = Saturday)
            const todayIndex = new Date().getDay();
            
            // Update current time display
            function updateCurrentTime() {
                const now = new Date();
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                const seconds = String(now.getSeconds()).padStart(2, '0');
                
                // Update header time
                const timeDisplay = document.getElementById('current-time');
                if (timeDisplay) {
                    timeDisplay.textContent = `${hours}:${minutes}:${seconds}`;
                }
                
                // Update time in today's tab
                const dayCurrentTime = document.getElementById('day-current-time');
                if (dayCurrentTime) {
                    dayCurrentTime.textContent = `${hours}:${minutes}`;
                }
                
                // Check if time is in range for today
                const todayTab = document.querySelector(`#tab-${todayIndex}`);
                if (todayTab) {
                    const todayPane = document.querySelector(`#pane-${todayIndex}`);
                    if (todayPane) {
                        const startTimeInput = todayPane.querySelector(`#start_time_${todayIndex}`);
                        const endTimeInput = todayPane.querySelector(`#end_time_${todayIndex}`);
                        const closedCheckbox = todayPane.querySelector(`#closed_${todayIndex}`);
                        
                        if (startTimeInput && endTimeInput && closedCheckbox && !closedCheckbox.checked) {
                            const startTime = startTimeInput.value;
                            const endTime = endTimeInput.value;
                            const currentTime = `${hours}:${minutes}`;
                            
                            const isInRange = currentTime >= startTime && currentTime <= endTime;
                            
                            // Update status indicator
                            const statusIndicator = document.querySelector('.time-status');
                            if (statusIndicator) {
                                if (isInRange) {
                                    statusIndicator.classList.remove('inactive');
                                    statusIndicator.classList.add('active');
                                    statusIndicator.querySelector('span:last-child').textContent = ' System is ACTIVE';
                                } else {
                                    statusIndicator.classList.remove('active');
                                    statusIndicator.classList.add('inactive');
                                    statusIndicator.querySelector('span:last-child').textContent = ' System is INACTIVE';
                                }
                            }
                        }
                    }
                }
            }
            
            // Initial call and set interval
            updateCurrentTime();
            setInterval(updateCurrentTime, 1000);
            
            // Handle "Closed" checkbox behavior
            document.querySelectorAll('.closed-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const index = this.id.split('_')[1];
                    const startInput = document.getElementById(`start_time_${index}`);
                    const endInput = document.getElementById(`end_time_${index}`);
                    const timeFieldsContainer = this.closest('form').querySelector('.time-fields');
                    
                    if (this.checked) {
                        // Save current values as data attributes for restoration if unchecked
                        startInput.dataset.prevValue = startInput.value;
                        endInput.dataset.prevValue = endInput.value;
                        
                        startInput.value = '00:00';
                        endInput.value = '00:00';
                        startInput.disabled = true;
                        endInput.disabled = true;
                        timeFieldsContainer.classList.add('disabled');
                        
                        // Update status badge
                        const statusBadge = this.closest('form').querySelector('.status-badge');
                        if (statusBadge) {
                            statusBadge.classList.remove('status-open');
                            statusBadge.classList.add('status-closed');
                            statusBadge.innerHTML = `<i class="fas fa-lock me-2" aria-hidden="true"></i> ${days[index]} is currently CLOSED`;
                        }
                    } else {
                        startInput.disabled = false;
                        endInput.disabled = false;
                        timeFieldsContainer.classList.remove('disabled');
                        
                        // Restore previous values if available
                        if (startInput.dataset.prevValue) {
                            startInput.value = startInput.dataset.prevValue;
                        } else if (startInput.value === '00:00') {
                            startInput.value = '08:00';
                        }
                        
                        if (endInput.dataset.prevValue) {
                            endInput.value = endInput.dataset.prevValue;
                        } else if (endInput.value === '00:00') {
                            endInput.value = '18:00';
                        }
                        
                        // Update status badge
                        const statusBadge = this.closest('form').querySelector('.status-badge');
                        if (statusBadge) {
                            statusBadge.classList.remove('status-closed');
                            statusBadge.classList.add('status-open');
                            const dayText = days[index];
                            const isToday = (parseInt(index) === todayIndex);
                            let badgeHTML = `<i class="fas fa-clock me-2" aria-hidden="true"></i> ${dayText} is currently OPEN (${startInput.value} - ${endInput.value})`;
                            if (isToday) {
                                badgeHTML += ` <span class="ms-2 small">(Current time: <span class="current-time" id="day-current-time">${new Date().getHours().toString().padStart(2, '0')}:${new Date().getMinutes().toString().padStart(2, '0')}</span>)</span>`;
                            }
                            statusBadge.innerHTML = badgeHTML;
                        }
                    }
                });
            });
            
            // Form validation with real-time feedback
            document.querySelectorAll('.time-input').forEach(input => {
                input.addEventListener('change', function() {
                    const form = this.closest('form');
                    const index = form.querySelector('[name^="day_index"]').value;
                    const startTimeInput = form.querySelector(`#start_time_${index}`);
                    const endTimeInput = form.querySelector(`#end_time_${index}`);
                    
                    if (!startTimeInput || !endTimeInput) return;
                    
                    const startTime = startTimeInput.value;
                    const endTime = endTimeInput.value;
                    
                    // Validate time range
                    if (startTime && endTime && startTime >= endTime) {
                        alert('Error: End time must be later than start time.');
                        // Reset to previous valid values
                        if (this.id.includes('start_time')) {
                            this.value = this.dataset.lastValidValue || '08:00';
                        } else {
                            this.value = this.dataset.lastValidValue || '18:00';
                        }
                    } else {
                        // Store valid values
                        this.dataset.lastValidValue = this.value;
                        
                        // Update status badge with new times
                        const statusBadge = form.querySelector('.status-badge');
                        if (statusBadge && statusBadge.classList.contains('status-open') && startTime && endTime) {
                            const dayText = days[index];
                            const isToday = (parseInt(index) === todayIndex);
                            let badgeHTML = `<i class="fas fa-clock me-2" aria-hidden="true"></i> ${dayText} is currently OPEN (${startTime} - ${endTime})`;
                            if (isToday) {
                                badgeHTML += ` <span class="ms-2 small">(Current time: <span class="current-time" id="day-current-time">${new Date().getHours().toString().padStart(2, '0')}:${new Date().getMinutes().toString().padStart(2, '0')}</span>)</span>`;
                            }
                            statusBadge.innerHTML = badgeHTML;
                        }
                    }
                });
            });

            // Form submission validation
            document.querySelectorAll('.settings-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    const index = this.querySelector('[name^="day_index"]').value;
                    const startTimeInput = this.querySelector(`#start_time_${index}`);
                    const endTimeInput = this.querySelector(`#end_time_${index}`);
                    const closedCheckbox = this.querySelector(`#closed_${index}`);
                    
                    if (!startTimeInput || !endTimeInput || !closedCheckbox) return true;
                    
                    if (!closedCheckbox.checked) {
                        // Only validate time fields if the day is not closed
                        if (!startTimeInput.value || !endTimeInput.value) {
                            e.preventDefault();
                            alert('Please set both start and end times.');
                            return false;
                        }
                        
                        if (startTimeInput.value >= endTimeInput.value) {
                            e.preventDefault();
                            alert('End time must be later than start time.');
                            return false;
                        }
                    }
                    
                    return true;
                });
            });
            
            // Initialize tooltips (if any)
            if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
        });
    </script>
</body>
</html>


assets\css\header_styles.css
/* Define CSS variables for maintainability */
:root {
    --navbar-bg: #ffee00; /* Yellow background */
    --text-color: #333; /* Default text color */
    --text-hover: #ff0000; /* Red on hover/active */
    --link-bg-hover: rgba(255, 0, 0, 0.1); /* Red-tinted background on hover */
    --link-color-active: #ff0000; /* Red for active/hover links */
    --separator-color: rgba(0, 0, 0, 0.2); /* Separator in collapsed menu */
    --shadow-color: rgba(0, 0, 0, 0.15); /* Subtle shadow */
}

/* General Navbar Styles */
.navbar {
    background-color: var(--navbar-bg);
    padding: 1rem 0;
    box-shadow: 0 4px 12px var(--shadow-color);
    max-width: 1300px;
    margin: 0 auto;
    border-radius: 8px;
    transition: all 0.3s ease;
}

/* Brand Styles */
.navbar-brand {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-color);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    transition: color 0.3s ease, transform 0.3s ease;
}

.navbar-brand:hover,
.navbar-brand:focus {
    color: var(--text-hover);
    transform: scale(1.05);
}

.navbar-brand:focus {
    outline: 2px solid var(--text-hover);
    outline-offset: 4px;
}

.brand-text {
    font-family: 'Arial', sans-serif; /* Or use a custom font */
    letter-spacing: 1px;
}

.logo-spin {
    transition: transform 0.5s ease;
}

.navbar-brand:hover .logo-spin {
    transform: rotate(360deg);
}

/* Nav Link Styles */
.navbar-nav .nav-link {
    color: var(--text-color);
    font-weight: 600;
    padding: 0.75rem 1.25rem;
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease;
    border-radius: 6px;
    text-decoration: none;
    position: relative;
}

.navbar-nav .nav-link:hover,
.navbar-nav .nav-link:focus,
.navbar-nav .nav-link.active {
    background-color: var(--link-bg-hover);
    color: var(--link-color-active);
    transform: translateY(-2px);
}

.navbar-nav .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 50%;
    background-color: var(--link-color-active);
    transition: width 0.3s ease, left 0.3s ease;
}

.navbar-nav .nav-link:hover::after,
.navbar-nav .nav-link.active::after {
    width: 100%;
    left: 0;
}

.navbar-nav .nav-link:focus {
    outline: 2px solid var(--text-hover);
    outline-offset: 2px;
}

/* Welcome Text */
.welcome-text {
    color: #666;
    font-style: italic;
    padding: 0.75rem 1.25rem;
}

/* Toggler Icon */
.navbar-toggler {
    border: none;
    padding: 0.5rem;
    transition: transform 0.3s ease;
}

.navbar-toggler:hover {
    transform: rotate(90deg);
}

.navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3E%3Cpath stroke='rgba(255, 0, 0, 0.8)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
}

/* Responsive Adjustments */
@media (max-width: 991.98px) {
    .navbar {
        padding: 0.75rem;
        border-radius: 0;
    }

    .navbar-nav {
        padding: 1rem 0;
        background-color: var(--navbar-bg);
        border-radius: 8px;
        margin-top: 0.5rem;
    }

    .navbar-nav .nav-item {
        border-bottom: 1px solid var(--separator-color);
    }

    .navbar-nav .nav-item:last-child {
        border-bottom: none;
    }

    .navbar-nav .nav-link {
        padding: 1rem;
    }

    .navbar-brand {
        font-size: 1.5rem;
    }
}

@media (min-width: 992px) {
    .navbar-nav {
        gap: 0.5rem;
    }
}

assets\css\styles.css
/* Scoped styles with red and white theme, dark gray text */
.time-settings {
    --primary-color: #d40612; /* Red */
    --primary-hover: #a80510; /* Darker red for hover */
    --bg-color: #ffffff; /* White background */
    --text-color: #212529; /* Dark gray for text */
    --animation-duration: 0.3s;
}
.time-settings .container {
    max-width: 1200px;
    padding: 2rem;
    background-color: var(--bg-color);
    min-height: calc(100vh - 100px); /* Adjust based on header/footer height */
}
.time-settings .page-header {
    border-bottom: 3px solid var(--primary-color);
    padding-bottom: 1rem;
    margin-bottom: 2rem;
    animation: slideInFromTop var(--animation-duration) ease-out;
}
.time-settings h1, .time-settings h2 {
    color: var(--primary-color);
}
.time-settings .card {
    background-color: var(--bg-color);
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    transition: transform var(--animation-duration), box-shadow var(--animation-duration);
}
.time-settings .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
}
.time-settings .card-header {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
    color: #ffffff;
    border-radius: 12px 12px 0 0;
    padding: 1rem 1.5rem;
}
.time-settings .nav-pills .nav-link {
    color: var(--primary-color);
    background-color: #f8f8f8;
    margin-right: 0.5rem;
    border-radius: 8px;
    transition: all var(--animation-duration);
}
.time-settings .nav-pills .nav-link.active {
    background-color: var(--primary-color);
    color: #ffffff;
}
.time-settings .btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: #ffffff;
    transition: all var(--animation-duration) ease;
}
.time-settings .btn-primary:hover {
    background-color: var(--primary-hover);
    border-color: var(--primary-hover);
    transform: translateY(-2px);
}
.time-settings .form-control {
    border-color: #ced4da;
    color: var(--text-color);
}
.time-settings .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(212, 6, 18, 0.25);
}
.time-settings .form-check-input:checked {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}
.time-settings .form-check-label, .time-settings p {
    color: var(--text-color);
}
.time-settings .alert {
    border-radius: 8px;
    animation: fadeIn var(--animation-duration) ease-in;
}
.time-settings .alert-success {
    background-color: #f8f9fa;
    color: #28a745;
    border: 1px solid #28a745;
}
.time-settings .alert-warning {
    background-color: #f8f9fa;
    color: #dc3545;
    border: 1px solid #dc3545;
}
@keyframes slideInFromTop {
    from { transform: translateY(-20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

authSystem\admin_users.php
<?php
require_once '../Dashboard/config.php';
include DASHBOARD_PATH . 'header.php';
require_once 'session_auth.php';

// --- Admin Check ---
if (!isset($_SESSION['username']) || !$_SESSION['is_admin']) {
    header("Location: login.php");
    exit();
}

// --- CSRF Protection ---
if (!isset($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// --- Database Connections ---
// User database connection is already in $GLOBALS['userdb_conn']
// Connect to contacts database
$contacts_db = new mysqli('localhost', 'hansasystems', 'Bremen2025', 'contacts');
if ($contacts_db->connect_error) {
    die("Connection to contacts database failed: " . $contacts_db->connect_error);
}

// --- Helper Functions for User Management ---
function addUser(mysqli $userdb_conn) {
    $username = filter_input(INPUT_POST, 'new_username', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $password = filter_input(INPUT_POST, 'new_password', FILTER_SANITIZE_FULL_SPECIAL_CHARS);

    if (!$username || !$password || strlen($username) < 3 || strlen($password) < 8) {
        return "Username (min 3 chars) and password (min 8 chars) are required.";
    }

    $stmt = $userdb_conn->prepare("SELECT id FROM users WHERE username = ?");
    $stmt->bind_param("s", $username);
    $stmt->execute();
    if ($stmt->get_result()->num_rows > 0) {
        $stmt->close();
        return "Username already exists.";
    }
    $stmt->close();

    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
    $stmt = $userdb_conn->prepare("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)");
    $isAdmin = 0;
    $stmt->bind_param("ssi", $username, $hashedPassword, $isAdmin);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error adding user: " . $userdb_conn->error;
}

function deleteUser(int $userId, mysqli $userdb_conn) {
    if ($userId == $_SESSION['user_id']) {
        return "Cannot delete yourself.";
    }

    $stmt = $userdb_conn->prepare("DELETE FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error deleting user: " . $userdb_conn->error;
}

function changePassword(int $userId, string $newPassword, mysqli $userdb_conn) {
    if (!$newPassword || strlen($newPassword) < 8) {
        return "New password must be at least 8 characters.";
    }

    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);
    $stmt = $userdb_conn->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->bind_param("si", $hashedPassword, $userId);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error changing password: " . $userdb_conn->error;
}

// --- Helper Functions for Contact Management ---
function addContact(mysqli $contacts_db) {
    $firstName = filter_input(INPUT_POST, 'first_name', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $lastName = filter_input(INPUT_POST, 'last_name', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $company = filter_input(INPUT_POST, 'company', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $phoneNumber = filter_input(INPUT_POST, 'phone_number', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $priority = filter_input(INPUT_POST, 'priority', FILTER_VALIDATE_INT);
    $duration = filter_input(INPUT_POST, 'duration', FILTER_VALIDATE_INT);

    // Validate required fields
    if (!$firstName || !$lastName || !$phoneNumber) {
        return "First name, last name, and phone number are required.";
    }
    
    // Validate phone number
    if (!preg_match('/^[0-9\+\-\(\)\s]{10,20}$/', $phoneNumber)) {
        return "Invalid phone number format.";
    }
    
    // Validate duration
    if (!$duration || $duration < 1) {
        return "Duration must be at least 1 second.";
    }
    
    // Ensure priority is valid
    if (!$priority || $priority < 1) {
        $priority = 100; // Default priority
    }

    $stmt = $contacts_db->prepare("INSERT INTO contacts (first_name, last_name, company, phone_number, priority, duration) VALUES (?, ?, ?, ?, ?, ?)");
    $stmt->bind_param("sssiii", $firstName, $lastName, $company, $phoneNumber, $priority, $duration);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error adding contact: " . $contacts_db->error;
}

function updateContact(mysqli $contacts_db) {
    $id = filter_input(INPUT_POST, 'contact_id', FILTER_VALIDATE_INT);
    $firstName = filter_input(INPUT_POST, 'edit_first_name', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $lastName = filter_input(INPUT_POST, 'edit_last_name', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $company = filter_input(INPUT_POST, 'edit_company', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $phoneNumber = filter_input(INPUT_POST, 'edit_phone_number', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $priority = filter_input(INPUT_POST, 'edit_priority', FILTER_VALIDATE_INT);
    $duration = filter_input(INPUT_POST, 'edit_duration', FILTER_VALIDATE_INT);
    $active = isset($_POST['edit_active']) ? 1 : 0;

    // Validate required fields
    if (!$id || !$firstName || !$lastName || !$phoneNumber) {
        return "ID, first name, last name, and phone number are required.";
    }
    
    // Validate phone number
    if (!preg_match('/^[0-9\+\-\(\)\s]{10,20}$/', $phoneNumber)) {
        return "Invalid phone number format.";
    }
    
    // Validate duration
    if (!$duration || $duration < 1) {
        return "Duration must be at least 1 second.";
    }
    
    // Ensure priority is valid
    if (!$priority || $priority < 1) {
        $priority = 100; // Default priority
    }

    $stmt = $contacts_db->prepare("UPDATE contacts SET first_name = ?, last_name = ?, company = ?, phone_number = ?, priority = ?, duration = ?, active = ? WHERE id = ?");
    $stmt->bind_param("ssssiiis", $firstName, $lastName, $company, $phoneNumber, $priority, $duration, $active, $id);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error updating contact: " . $contacts_db->error;
}

function deleteContact(mysqli $contacts_db) {
    $id = filter_input(INPUT_POST, 'delete_contact', FILTER_VALIDATE_INT);
    
    if (!$id) {
        return "Invalid contact ID.";
    }
    
    // First check if there are any references in call_log
    $stmt = $contacts_db->prepare("SELECT COUNT(*) as count FROM call_log WHERE contact_id = ?");
    $stmt->bind_param("i", $id);
    $stmt->execute();
    $result = $stmt->get_result();
    $row = $result->fetch_assoc();
    $stmt->close();
    
    if ($row['count'] > 0) {
        return "Cannot delete contact: It has associated call logs. Please delete those first or deactivate the contact instead.";
    }
    
    $stmt = $contacts_db->prepare("DELETE FROM contacts WHERE id = ?");
    $stmt->bind_param("i", $id);
    $result = $stmt->execute();
    $stmt->close();
    
    return $result ? true : "Error deleting contact: " . $contacts_db->error;
}

function getCallLogCount(int $contactId, mysqli $contacts_db) {
    $stmt = $contacts_db->prepare("SELECT COUNT(*) as count FROM call_log WHERE contact_id = ?");
    $stmt->bind_param("i", $contactId);
    $stmt->execute();
    $result = $stmt->get_result();
    $row = $result->fetch_assoc();
    $stmt->close();
    
    return $row['count'];
}

// --- Main Processing ---
$error = '';
$success = '';
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (!isset($_POST['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
        $error = "Invalid CSRF token. Please refresh the page and try again.";
    } else {
        // User Management
        if (isset($_POST['add_user'])) {
            $result = addUser($GLOBALS['userdb_conn']);
            if ($result === true) {
                $success = "User added successfully!";
            } else {
                $error = $result;
            }
        } elseif (isset($_POST['delete_user'])) {
            $userId = filter_input(INPUT_POST, 'delete_user', FILTER_VALIDATE_INT);
            $result = $userId ? deleteUser($userId, $GLOBALS['userdb_conn']) : "Invalid user ID";
            if ($result === true) {
                $success = "User deleted successfully!";
            } else {
                $error = $result;
            }
        } elseif (isset($_POST['change_password'])) {
            $userId = filter_input(INPUT_POST, 'change_password', FILTER_VALIDATE_INT);
            $newPassword = filter_input(INPUT_POST, 'new_password', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
            $result = ($userId && $newPassword) ? changePassword($userId, $newPassword, $GLOBALS['userdb_conn']) : "Invalid user ID or password";
            if ($result === true) {
                $success = "Password changed successfully!";
            } else {
                $error = $result;
            }
        } 
        // Contact Management
        elseif (isset($_POST['add_contact'])) {
            $result = addContact($contacts_db);
            if ($result === true) {
                $success = "Contact added successfully!";
            } else {
                $error = $result;
            }
        } elseif (isset($_POST['update_contact'])) {
            $result = updateContact($contacts_db);
            if ($result === true) {
                $success = "Contact updated successfully!";
            } else {
                $error = $result;
            }
        } elseif (isset($_POST['delete_contact'])) {
            $result = deleteContact($contacts_db);
            if ($result === true) {
                $success = "Contact deleted successfully!";
            } else {
                $error = $result;
            }
        }
    }
}

// --- Fetch Users ---
$stmt = $GLOBALS['userdb_conn']->prepare("SELECT id, username FROM users");
$stmt->execute();
$users = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
$stmt->close();

// --- Fetch Contacts (sort by ID instead of priority) ---
$stmt = $contacts_db->prepare("SELECT * FROM contacts ORDER BY id ASC");
$stmt->execute();
$contacts = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
$stmt->close();

$pageTitle = "Admin Panel";
$pageDescription = "Manage users and contacts";
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $pageTitle; ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #dc3545;
            --primary-hover: #c82333;
        }

        .container-fluid {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-header {
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s;
            margin-bottom: 20px;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            border-radius: 10px 10px 0 0;
            padding: 1rem 1.5rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .table {
            border-radius: 8px;
            overflow: hidden;
        }

        .table th {
            background-color: #f8f9fa;
            color: #495057;
        }

        .table tbody tr {
            transition: background-color 0.2s;
        }

        .table tbody tr:hover {
            background-color: #f1f3f5;
        }

        .alert {
            border-radius: 8px;
            margin-bottom: 2rem;
        }

        .nav-tabs {
            border-bottom: 2px solid var(--primary-color);
            margin-bottom: 2rem;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #495057;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border-radius: 10px 10px 0 0;
            transition: all 0.3s ease;
        }

        .nav-tabs .nav-link.active {
            color: white;
            background-color: var(--primary-color);
        }

        .nav-tabs .nav-link:hover:not(.active) {
            background-color: #f8f9fa;
            color: var(--primary-color);
        }

        .inactive-contact {
            background-color: #f8f9fa;
            color: #6c757d;
        }
        
        .call-count {
            font-size: 0.85rem;
            font-weight: normal;
        }

        .password-strength {
            height: 5px;
            margin-top: 5px;
            border-radius: 3px;
            transition: all 0.3s;
        }
    </style>
</head>
<body>
    <main>
        <div class="container-fluid">
            <div class="page-header">
                <h1 class="display-5 fw-bold"><?php echo $pageTitle; ?></h1>
                <p class="lead text-muted"><?php echo $pageDescription; ?></p>
            </div>

            <?php if ($error): ?>
                <div class="alert alert-danger shadow-sm">
                    <i class="bi bi-exclamation-triangle me-2"></i><?php echo htmlspecialchars($error); ?>
                </div>
            <?php endif; ?>

            <?php if ($success): ?>
                <div class="alert alert-success shadow-sm">
                    <i class="bi bi-check-circle me-2"></i><?php echo htmlspecialchars($success); ?>
                </div>
            <?php endif; ?>

            <ul class="nav nav-tabs" id="adminTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="users-tab" data-bs-toggle="tab" data-bs-target="#users-content" type="button" role="tab" aria-controls="users-content" aria-selected="true">
                        <i class="bi bi-people"></i> User Management
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="contacts-tab" data-bs-toggle="tab" data-bs-target="#contacts-content" type="button" role="tab" aria-controls="contacts-content" aria-selected="false">
                        <i class="bi bi-telephone"></i> Contact Management
                    </button>
                </li>
            </ul>

            <div class="tab-content" id="adminTabsContent">
                <!-- Users Management Tab -->
                <div class="tab-pane fade show active" id="users-content" role="tabpanel" aria-labelledby="users-tab">
                    <div class="row">
                        <!-- Add User Section -->
                        <div class="col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header">
                                    <i class="bi bi-person-plus me-2"></i>Add New User
                                </div>
                                <div class="card-body">
                                    <form method="post" id="addUserForm">
                                        <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                        <div class="mb-3">
                                            <label for="new_username" class="form-label">Username</label>
                                            <input type="text" class="form-control" id="new_username" name="new_username" minlength="3" required>
                                            <div class="form-text">Minimum 3 characters</div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="new_password" class="form-label">Password</label>
                                            <input type="password" class="form-control" id="new_password" name="new_password" minlength="8" required>
                                            <div class="form-text">Minimum 8 characters</div>
                                            <div class="password-strength"></div>
                                        </div>
                                        <button type="submit" name="add_user" class="btn btn-primary w-100">
                                            <i class="bi bi-plus-circle me-2"></i>Add User
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Existing Users Section -->
                        <div class="col-lg-8 mb-4">
                            <div class="card">
                                <div class="card-header">
                                    <i class="bi bi-people me-2"></i>Existing Users
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover align-middle">
                                            <thead>
                                                <tr>
                                                    <th>ID</th>
                                                    <th>Username</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <?php if (empty($users)): ?>
                                                    <tr>
                                                        <td colspan="3" class="text-center py-3">No users found</td>
                                                    </tr>
                                                <?php else: ?>
                                                    <?php foreach ($users as $user): ?>
                                                        <tr>
                                                            <td><?php echo htmlspecialchars($user['id']); ?></td>
                                                            <td><?php echo htmlspecialchars($user['username']); ?></td>
                                                            <td>
                                                                <form method="post" class="d-inline">
                                                                    <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                                                    <input type="hidden" name="delete_user" value="<?php echo $user['id']; ?>">
                                                                    <button type="submit" class="btn btn-sm btn-outline-danger me-2" onclick="return confirm('Are you sure you want to delete this user?');">
                                                                        <i class="bi bi-trash"></i> Delete
                                                                    </button>
                                                                </form>
                                                                <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#changePasswordModal" data-userid="<?php echo $user['id']; ?>" data-username="<?php echo htmlspecialchars($user['username']); ?>">
                                                                    <i class="bi bi-key"></i> Change Password
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    <?php endforeach; ?>
                                                <?php endif; ?>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Contact Management Tab -->
                <div class="tab-pane fade" id="contacts-content" role="tabpanel" aria-labelledby="contacts-tab">
                    <div class="row">
                        <!-- Add Contact Section -->
                        <div class="col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header">
                                    <i class="bi bi-person-plus me-2"></i>Add New Contact
                                </div>
                                <div class="card-body">
                                    <form method="post" id="addContactForm">
                                        <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                        <div class="mb-3">
                                            <label for="first_name" class="form-label">First Name</label>
                                            <input type="text" class="form-control" id="first_name" name="first_name" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="last_name" class="form-label">Last Name</label>
                                            <input type="text" class="form-control" id="last_name" name="last_name" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="company" class="form-label">Company</label>
                                            <input type="text" class="form-control" id="company" name="company">
                                        </div>
                                        <div class="mb-3">
                                            <label for="phone_number" class="form-label">Phone Number</label>
                                            <input type="text" class="form-control" id="phone_number" name="phone_number" pattern="[0-9\+\-\(\)\s]{10,20}" required>
                                            <div class="form-text">Format: +49123456789 or other valid phone number</div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="duration" class="form-label">Call Duration (seconds)</label>
                                            <input type="number" class="form-control" id="duration" name="duration" value="15" min="1" required>
                                        </div>
                                        <button type="submit" name="add_contact" class="btn btn-primary w-100">
                                            <i class="bi bi-plus-circle me-2"></i>Add Contact
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Existing Contacts Section -->
                        <div class="col-lg-8 mb-4">
                            <div class="card">
                                <div class="card-header">
                                    <i class="bi bi-telephone me-2"></i>Existing Contacts
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover align-middle">
                                            <thead>
                                                <tr>
                                                    <th>ID</th>
                                                    <th>Name</th>
                                                    <th>Company</th>
                                                    <th>Phone</th>
                                                    <th>Priority</th>
                                                    <th>Duration</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <?php if (empty($contacts)): ?>
                                                    <tr>
                                                        <td colspan="8" class="text-center py-3">No contacts found</td>
                                                    </tr>
                                                <?php else: ?>
                                                    <?php foreach ($contacts as $contact): 
                                                        $callCount = getCallLogCount($contact['id'], $contacts_db);
                                                    ?>
                                                        <tr class="<?php echo $contact['active'] ? '' : 'inactive-contact'; ?>">
                                                            <td><?php echo htmlspecialchars($contact['id']); ?></td>
                                                            <td>
                                                                <?php echo htmlspecialchars($contact['first_name'].' '.$contact['last_name']); ?>
                                                                <?php if ($callCount > 0): ?>
                                                                    <span class="badge bg-info ms-2 call-count"><?php echo $callCount; ?> calls</span>
                                                                <?php endif; ?>
                                                            </td>
                                                            <td><?php echo htmlspecialchars($contact['company']); ?></td>
                                                            <td><?php echo htmlspecialchars($contact['phone_number']); ?></td>
                                                            <td><?php echo htmlspecialchars($contact['priority']); ?></td>
                                                            <td><?php echo htmlspecialchars($contact['duration']); ?>s</td>
                                                            <td>
                                                                <span class="badge bg-<?php echo $contact['active'] ? 'success' : 'secondary'; ?>">
                                                                    <?php echo $contact['active'] ? 'Active' : 'Inactive'; ?>
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <button type="button" class="btn btn-sm btn-outline-primary me-1" data-bs-toggle="modal" data-bs-target="#editContactModal" 
                                                                    data-id="<?php echo $contact['id']; ?>"
                                                                    data-firstname="<?php echo htmlspecialchars($contact['first_name']); ?>"
                                                                    data-lastname="<?php echo htmlspecialchars($contact['last_name']); ?>"
                                                                    data-company="<?php echo htmlspecialchars($contact['company']); ?>"
                                                                    data-phone="<?php echo htmlspecialchars($contact['phone_number']); ?>"
                                                                    data-priority="<?php echo htmlspecialchars($contact['priority']); ?>"
                                                                    data-duration="<?php echo htmlspecialchars($contact['duration']); ?>"
                                                                    data-active="<?php echo $contact['active']; ?>"
                                                                    data-callcount="<?php echo $callCount; ?>">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <form method="post" class="d-inline">
                                                                    <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                                                    <input type="hidden" name="delete_contact" value="<?php echo $contact['id']; ?>">
                                                                    <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this contact? This cannot be undone.');" <?php echo $callCount > 0 ? 'disabled title="Cannot delete contacts with call logs"' : ''; ?>>
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </form>
                                                            </td>
                                                        </tr>
                                                    <?php endforeach; ?>
                                                <?php endif; ?>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Change Password Modal -->
            <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form method="post" id="changePasswordForm">
                                <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                <input type="hidden" name="change_password" id="modal_user_id">
                                <div class="mb-3">
                                    <label for="modal_new_password" class="form-label">New Password</label>
                                    <input type="password" class="form
                                    <input type="password" class="form-control" id="modal_new_password" name="new_password" minlength="8" required>
                                    <div class="form-text">Minimum 8 characters</div>
                                    <div class="password-strength"></div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Change Password</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Contact Modal -->
            <div class="modal fade" id="editContactModal" tabindex="-1" aria-labelledby="editContactModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editContactModalLabel">Edit Contact</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form method="post" id="editContactForm">
                                <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                                <input type="hidden" name="contact_id" id="edit_contact_id">
                                <div class="mb-3">
                                    <label for="edit_first_name" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="edit_first_name" name="edit_first_name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="edit_last_name" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="edit_last_name" name="edit_last_name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="edit_company" class="form-label">Company</label>
                                    <input type="text" class="form-control" id="edit_company" name="edit_company">
                                </div>
                                <div class="mb-3">
                                    <label for="edit_phone_number" class="form-label">Phone Number</label>
                                    <input type="text" class="form-control" id="edit_phone_number" name="edit_phone_number" pattern="[0-9\+\-\(\)\s]{10,20}" required>
                                    <div class="form-text">Format: +49123456789 or other valid phone number</div>
                                </div>
                                <div class="mb-3">
                                    <label for="edit_priority" class="form-label">Priority (lower number = higher priority)</label>
                                    <input type="number" class="form-control" id="edit_priority" name="edit_priority" min="1" max="999">
                                </div>
                                <div class="mb-3">
                                    <label for="edit_duration" class="form-label">Call Duration (seconds)</label>
                                    <input type="number" class="form-control" id="edit_duration" name="edit_duration" min="1" required>
                                </div>
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="edit_active" name="edit_active">
                                    <label class="form-check-label" for="edit_active">Active</label>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" name="update_contact" class="btn btn-primary">Update Contact</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Change Password Modal
        const changePasswordModal = document.getElementById('changePasswordModal');
        if (changePasswordModal) {
            changePasswordModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const userId = button.getAttribute('data-userid');
                const username = button.getAttribute('data-username');
                
                const modalTitle = this.querySelector('.modal-title');
                const modalUserId = this.querySelector('#modal_user_id');
                
                modalTitle.textContent = 'Change Password for ' + username;
                modalUserId.value = userId;
            });
        }
        
        // Edit Contact Modal
        const editContactModal = document.getElementById('editContactModal');
        if (editContactModal) {
            editContactModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const id = button.getAttribute('data-id');
                const firstName = button.getAttribute('data-firstname');
                const lastName = button.getAttribute('data-lastname');
                const company = button.getAttribute('data-company');
                const phone = button.getAttribute('data-phone');
                const priority = button.getAttribute('data-priority');
                const duration = button.getAttribute('data-duration');
                const active = button.getAttribute('data-active') === '1';
                const callCount = button.getAttribute('data-callcount');
                
                this.querySelector('#edit_contact_id').value = id;
                this.querySelector('#edit_first_name').value = firstName;
                this.querySelector('#edit_last_name').value = lastName;
                this.querySelector('#edit_company').value = company;
                this.querySelector('#edit_phone_number').value = phone;
                this.querySelector('#edit_priority').value = priority;
                this.querySelector('#edit_duration').value = duration;
                this.querySelector('#edit_active').checked = active;
                
                // Add warning if contact has call logs
                const modalTitle = this.querySelector('.modal-title');
                if (callCount > 0) {
                    modalTitle.innerHTML = `Edit Contact <span class="badge bg-info ms-2">${callCount} calls</span>`;
                } else {
                    modalTitle.textContent = 'Edit Contact';
                }
            });
        }
        
        // Password strength indicator
        const passwordInputs = document.querySelectorAll('#new_password, #modal_new_password');
        passwordInputs.forEach(input => {
            input.addEventListener('input', function() {
                const strength = input.parentElement.querySelector('.password-strength');
                const val = input.value;
                
                // Simple password strength indicator
                if (val.length < 8) {
                    strength.style.width = '25%';
                    strength.style.backgroundColor = '#dc3545';
                } else if (val.length >= 8 && val.length < 12) {
                    strength.style.width = '50%';
                    strength.style.backgroundColor = '#ffc107';
                } else if (val.length >= 12 && (!/[A-Z]/.test(val) || !/[0-9]/.test(val))) {
                    strength.style.width = '75%';
                    strength.style.backgroundColor = '#0dcaf0';
                } else {
                    strength.style.width = '100%';
                    strength.style.backgroundColor = '#198754';
                }
            });
        });
    </script>
</body>
</html>

authSystem\auth_check.php
<?php
session_start();

// Verify session validity
if (!isset($_SESSION["username"]) || 
    !isset($_SESSION['ip']) || $_SESSION['ip'] !== $_SERVER['REMOTE_ADDR'] ||
    !isset($_SESSION['user_agent']) || $_SESSION['user_agent'] !== $_SERVER['HTTP_USER_AGENT']) {
    // Invalid session detected - log it for security monitoring
    if (isset($_SESSION["username"])) {
        error_log("Security: Session validation failed for user " . $_SESSION["username"]);
    }
    session_unset();
    session_destroy();
    header("Location: /authSystem/login.php?error=session_invalid");
    exit();
}

// Check session timeout (30 minutes)
if (isset($_SESSION['last_activity']) && 
    (time() - $_SESSION['last_activity'] > 1800)) {
    error_log("Security: Session timeout for user " . $_SESSION["username"]);
    session_unset();
    session_destroy();
    header("Location: /authSystem/login.php?error=session_expired");
    exit();
}

// Update last activity time
$_SESSION['last_activity'] = time();

// Regenerate session ID periodically
if (!isset($_SESSION['created'])) {
    $_SESSION['created'] = time();
} elseif (time() - $_SESSION['created'] > 1800) {
    // Regenerate session ID every 30 minutes
    $old_session_id = session_id();
    session_regenerate_id(true);
    error_log("Security: Session ID regenerated for user " . $_SESSION["username"] . 
              " (Old: $old_session_id, New: " . session_id() . ")");
    $_SESSION['created'] = time();
}
?>


authSystem\homepage.php
<?php
require '../Dashboard/config.php'; // Adjust this path to your database config file

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = trim($_POST["username"]);
    $password = $_POST["password"];

    // Validate input
    if (empty($username) || empty($password)) {
        $error = "Username and password are required.";
    } else {
        // Prepare SQL statement to prevent SQL injection
        $stmt = $userdb_conn->prepare("SELECT * FROM users WHERE username=?");
        $stmt->bind_param("s", $username);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($user = $result->fetch_assoc()) {
            // Verify password
            if (password_verify($password, $user["password"])) {
                // Start the session
                session_start();

                // Set session variables
                $_SESSION["username"] = $user["username"];
                $_SESSION["ip"] = $_SERVER['REMOTE_ADDR'];
                $_SESSION["user_agent"] = $_SERVER['HTTP_USER_AGENT'];

                // Always redirect to homepage.php after login
                header("Location: homepage.php");
                exit();
            } else {
                $error = "Invalid credentials.";
            }
        } else {
            $error = "User not found.";
        }
        $stmt->close();
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <form action="login.php" method="POST">
        <h1>Login</h1>
        <div class="inputs_container">
            <input type="text" placeholder="Username" name="username" autocomplete="off" required>
            <input type="password" placeholder="Password" name="password" autocomplete="off" required>
        </div>
        <?php if (isset($error)): ?>
            <div class="error-message"><?php echo htmlspecialchars($error); ?></div>
        <?php endif; ?>
        <button name="submit">Login</button>
    </form>
</body>
</html>

authSystem\index.php
<?php
session_start();
require '../Dashboard/config.php';
require_once 'session_auth.php';


//Check if the session is valid.  If not, redirect to login.php
if (!isset($_SESSION['username'])) {
    header("Location: login.php");
    exit;
}


//Rest of the Dashboard code here.
//Example:
echo "<h2>Welcome, " . $_SESSION['username'] . "!</h2>";
echo "<a href='logout.php'>Logout</a>";


if ($_SESSION['is_admin']) {
    echo "<a href='admin_users.php'>Admin Users</a>";
}


function registerUser ($username, $password) {
    global $userdb_conn;
    $stmt = $userdb_conn->prepare("INSERT INTO users(username, password) VALUES(?, ?)");
    if (!$stmt) {
        die("Prepare failed: " . $userdb_conn->error);
    }
    $stmt->bind_param("ss", $username, $password);
    if ($stmt->execute()) {
        header("Location: ../index.php");
        exit;
    } else {
        die("Error: " . $stmt->error);
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrieren</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
        }
        .card {
            max-width: 400px;
            padding: 2rem;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            border: none;
            border-radius: 15px;
        }
    </style>
</head>
<body>
    <div class="container d-flex justify-content-center align-items-center vh-100">
        <div class="card">
            <h2 class="card-title text-center mb-4 text-danger">
                <i class="bi bi-person-plus me-2"></i>Add Admin User
            </h2>
            <form action="index.php" method="POST">
                <?php if (isset($error)) : ?>
                    <div class="alert alert-danger" role="alert">
                        <?= $error ?>
                    </div>
                <?php endif; ?>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="username" name="username" placeholder="Username" required autofocus>
                    <label for="username">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="password" class="form-control" id="password" name="password" placeholder="Password" required>
                    <label for="password">Password</label>
                </div>
                <button type="submit" class="btn btn-danger w-100" name="submit">Create</button>
            </form>
            </div>
    </div>
</body>
</html>


authSystem\login.php
<?php
session_start();
require '../Dashboard/config.php';

// Initialize translation system
require_once '../includes/Translation.php';
$translator = new Translation(isset($_GET['lang']) ? $_GET['lang'] : null);

// CSRF Protection
if (!isset($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

$error = '';
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // CSRF protection check
    if (!isset($_POST['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
        $error = $translator->get('invalid_csrf');
    } else {
        $username = trim(filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING));
        $password = filter_input(INPUT_POST, 'password', FILTER_UNSAFE_RAW); // Don't sanitize passwords

        if (empty($username) || empty($password)) {
            $error = $translator->get('username_and_password_required');
        } else {
            $stmt = $userdb_conn->prepare("SELECT id, username, password, is_admin FROM users WHERE username = ?");
            if (!$stmt) {
                error_log("Database error in login: " . $userdb_conn->error);
                $error = $translator->get('system_error');
            } else {
                $stmt->bind_param("s", $username);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result && $result->num_rows === 1) {
                    $user = $result->fetch_assoc();
                    if (password_verify($password, $user['password'])) {
                        // Regenerate session ID for security
                        session_regenerate_id(true);
                        
                        // Set session variables
                        $_SESSION['username'] = $user['username'];
                        $_SESSION['user_id'] = $user['id'];
                        $_SESSION['is_admin'] = $user['is_admin'];
                        $_SESSION['ip'] = $_SERVER['REMOTE_ADDR'];
                        $_SESSION['user_agent'] = $_SERVER['HTTP_USER_AGENT'];
                        $_SESSION['last_activity'] = time();
                        $_SESSION['created'] = time();
                        
                        // Log successful login
                        error_log("User login: " . $user['username']);
                        
                        header("Location: ../index.php");
                        exit;
                    } else {
                        // Log failed login attempt
                        error_log("Failed login attempt for username: $username");
                        $error = $translator->get('invalid_credentials');
                    }
                } else {
                    // Log unknown username
                    error_log("Login attempt with unknown username: $username");
                    $error = $translator->get('user_not_found');
                }
                $stmt->close();
            }
        }
    }
}
$userdb_conn->close();
?>
<!DOCTYPE html>
<html lang="<?php echo $translator->getCurrentLanguage(); ?>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $translator->get('login_title'); ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
            height: 100vh;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            background-image: url('data:image/svg+xml,%3Csvg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"%3E%3Cpath d="M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-0.895 2-2s-0.895-2-2-2-2 0.895-2 2 0.895 2 2 2zM60 91c1.105 0 2-0.895 2-2s-0.895-2-2-2-2 0.895-2 2 0.895 2 2 2zM35 41c1.105 0 2-0.895 2-2s-0.895-2-2-2-2 0.895-2 2 0.895 2 2 2zM12 60c1.105 0 2-0.895 2-2s-0.895-2-2-2-2 0.895-2 2 0.895 2 2 2z" fill="%23e9ecef" fill-opacity="0.4" fill-rule="evenodd"/%3E%3C/svg%3E');
        }
        .card {
            max-width: 400px;
            padding: 2rem;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            border: none;
            border-radius: 15px;
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }
        .form-control {
            transition: all 0.3s ease;
        }
        .form-control:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        }
        .text-danger {
            color: #dc3545 !important;
        }
        .alert-danger {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
            text-align: center;
            animation: fadeInAlert 0.5s ease-in;
        }
        @keyframes fadeInAlert {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* Language switcher styles */
        .language-switcher {
            position: absolute;
            top: 20px;
            right: 20px;
        }
        
        .language-switcher .btn {
            padding: 0.375rem 0.75rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <!-- Language Switcher -->
    <div class="language-switcher dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <?php echo ($translator->getCurrentLanguage() === 'en') ? 'English' : 'Deutsch'; ?>
        </button>
        <ul class="dropdown-menu" aria-labelledby="languageDropdown">
            <li><a class="dropdown-item" href="?lang=en">English</a></li>
            <li><a class="dropdown-item" href="?lang=de">Deutsch</a></li>
        </ul>
    </div>

    <div class="container d-flex justify-content-center align-items-center vh-100">
        <div class="card">
            <h2 class="card-title text-center mb-4 text-danger">
                <i class="bi bi-lock me-2"></i><?php echo $translator->get('login_title'); ?>
            </h2>
            <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
                <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="username" name="username" placeholder="<?php echo $translator->get('username_label'); ?>" required autofocus>
                    <label for="username"><?php echo $translator->get('username_label'); ?></label>
                </div>
                <div class="form-floating mb-3">
                    <input type="password" class="form-control" id="password" name="password" placeholder="<?php echo $translator->get('password_label'); ?>" required>
                    <label for="password"><?php echo $translator->get('password_label'); ?></label>
                </div>
                <?php if (!empty($error)): ?>
                <div class="alert alert-danger" role="alert">
                    <?php echo htmlspecialchars($error); ?>
                </div>
                <?php endif; ?>
                <button type="submit" class="btn btn-danger w-100"><?php echo $translator->get('login_button'); ?></button>
            </form>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


authSystem\logout.php
<?php
session_start();

// Unset all session variables
$_SESSION = array();

// Delete session cookie
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

// Destroy session
session_destroy();

// Redirect to login page
header("Location: ../index.php");
exit();
?>

authSystem\session_auth.php
<?php
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Session timeout in seconds (e.g., 30 minutes)
const SESSION_TIMEOUT = 1800;

//Check if a session exists
if (isset($_SESSION['username'])) {
  //Check last activity
  if (isset($_SESSION['last_activity']) && (time() - $_SESSION['last_activity'] > SESSION_TIMEOUT)) {
      session_unset();
      session_destroy();
      header("Location: login.php");
      exit();
  } else {
    $_SESSION['last_activity'] = time();
  }
  //Regenerate session ID every 30 minutes
  if (!isset($_SESSION['created'])) {
      $_SESSION['created'] = time();
  } elseif (time() - $_SESSION['created'] > 1800) {
      session_regenerate_id(true);
      $_SESSION['created'] = time();
  }
}

?>


Dashboard\config.php
<?php
// config.php - Configuration settings for the Presence Check system
declare(strict_types=1);
error_reporting(E_ALL);
ini_set('display_errors', '1');

// Define absolute paths with proper directory separation
define('BASE_PATH', dirname(__DIR__) . DIRECTORY_SEPARATOR);
define('ASSETS_PATH', BASE_PATH . 'assets' . DIRECTORY_SEPARATOR);
define('AUTH_PATH', BASE_PATH . 'authSystem' . DIRECTORY_SEPARATOR);
define('DASHBOARD_PATH', BASE_PATH . 'Dashboard' . DIRECTORY_SEPARATOR);
define('UTILITIES_PATH', BASE_PATH . 'Utilities' . DIRECTORY_SEPARATOR);
define('LANG_PATH', BASE_PATH . 'languages' . DIRECTORY_SEPARATOR);

// Verify directory existence
$required_dirs = [
    ASSETS_PATH,
    AUTH_PATH,
    DASHBOARD_PATH,
    UTILITIES_PATH,
    LANG_PATH
];

foreach ($required_dirs as $dir) {
    if (!is_dir($dir)) {
        die("Missing required directory: " . basename($dir));
    }
}

// Database configurations - Consider moving to .env file in production
$db_config = [
    'host' => 'localhost',
    'user' => 'root',
    'pass' => '',
    'name' => 'presencecheck',
    'port' => 3306,
    'charset' => 'utf8mb4'
];

$userdb_config = [
    'host' => 'localhost',
    'user' => 'root',
    'pass' => '',
    'name' => 'userdb',
    'port' => 3306,
    'charset' => 'utf8mb4'
];

// Database connection function to reduce code duplication
function createDbConnection($config) {
    $conn = new mysqli(
        $config['host'],
        $config['user'],
        $config['pass'],
        $config['name'],
        $config['port']
    );
    
    if ($conn->connect_error) {
        throw new RuntimeException(
            "DB Connection failed: " . $conn->connect_error
        );
    }
    
    $conn->set_charset($config['charset']);
    return $conn;
}

try {
    // Main database connection
    $conn = createDbConnection($db_config);
    
    // User database connection
    $userdb_conn = createDbConnection($userdb_config);

    // Store connections in globals
    $GLOBALS['presence_db'] = $conn;
    $GLOBALS['user_db'] = $userdb_conn;
    
} catch (RuntimeException $e) {
    error_log($e->getMessage());
    die("Database connection error. Please check the server logs.");
}

// Set default timezone
date_default_timezone_set('Europe/Berlin');

// Define application constants
define('DEFAULT_LANGUAGE', 'en');
define('SESSION_TIMEOUT', 1800); // 30 minutes in seconds
define('ALLOWED_LANGUAGES', ['en', 'de']);

// Include error handler after connections are established
require_once DASHBOARD_PATH . 'error_handler.php';

// Security headers - Uncomment in production
// header("X-XSS-Protection: 1; mode=block");
// header("X-Content-Type-Options: nosniff");
// header("X-Frame-Options: SAMEORIGIN");
// header("Referrer-Policy: strict-origin-when-cross-origin");
?>


Dashboard\error_handler.php
<?php
/**
 * Centralized error handler for the presence system
 * 
 * This file provides error handling functions for the application.
 */

// Set up custom error handler for PHP errors
set_error_handler("customErrorHandler");

/**
 * Custom PHP error handler
 * 
 * @param int $errno Error number
 * @param string $errstr Error message
 * @param string $errfile File where the error occurred
 * @param int $errline Line where the error occurred
 * @return bool
 */
function customErrorHandler($errno, $errstr, $errfile, $errline) {
    $error_message = "PHP Error [$errno] $errstr in $errfile on line $errline";
    error_log($error_message);
    
    // Don't display system path in production
    $errfile = basename($errfile);
    
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    $_SESSION['error_type'] = "System";
    $_SESSION['error_message'] = "An unexpected error occurred. Please try again later.";
    
    // For development only - comment out in production
    $_SESSION['error_detail'] = "$errstr in $errfile on line $errline";
    
    return true;
}

/**
 * Centralized error handler for application errors
 * 
 * @param string $errorType Type of error (Database, Validation, System, etc)
 * @param string $message Detailed error message
 * @param string|null $redirectTo Optional URL to redirect to
 * @param bool $displayToUser Whether to display this error to the user
 * @param int $logLevel Error log level (optional)
 */
function handleError($errorType, $message, $redirectTo = null, $displayToUser = true, $logLevel = 0) {
    // Log the error to server logs
    error_log("[$errorType] $message");
    
    // Store error in session for displaying to user if needed
    if ($displayToUser) {
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        $_SESSION['error_type'] = $errorType;
        $_SESSION['error_message'] = $message;
        $_SESSION['error_time'] = date('Y-m-d H:i:s');
    }
    
    // Redirect if specified
    if ($redirectTo) {
        header("Location: $redirectTo");
        exit();
    }
}

/**
 * Display error message if it exists in session
 * 
 * @param bool $clear Whether to clear the error after displaying
 * @return string HTML for error message or empty string if no error
 */
function displayError($clear = true) {
    if (isset($_SESSION['error_type']) && isset($_SESSION['error_message'])) {
        $type = htmlspecialchars($_SESSION['error_type']);
        $message = htmlspecialchars($_SESSION['error_message']);
        $time = isset($_SESSION['error_time']) ? htmlspecialchars($_SESSION['error_time']) : '';
        
        // Debug details (for development only)
        $detail = isset($_SESSION['error_detail']) ? htmlspecialchars($_SESSION['error_detail']) : '';
        
        // Clear error from session if requested
        if ($clear) {
            unset($_SESSION['error_type']);
            unset($_SESSION['error_message']);
            unset($_SESSION['error_time']);
            unset($_SESSION['error_detail']);
        }
        
        $html = "<div class='alert alert-danger' role='alert'>";
        $html .= "<strong>$type Error:</strong> $message";
        
        if (!empty($time)) {
            $html .= "<br><small>Time: $time</small>";
        }
        
        // Only show details in development environment
        if (!empty($detail) && $_SERVER['SERVER_NAME'] === 'localhost') {
            $html .= "<hr><details><summary>Technical Details (Dev only)</summary>$detail</details>";
        }
        
        $html .= "</div>";
        
        return $html;
    }
    return "";
}

/**
 * Record a successful operation
 * 
 * @param string $message Success message
 * @param string|null $redirectTo Optional URL to redirect to
 */
function recordSuccess($message, $redirectTo = null) {
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    $_SESSION['success_message'] = $message;
    $_SESSION['success_time'] = date('Y-m-d H:i:s');
    
    if ($redirectTo) {
        header("Location: $redirectTo");
        exit();
    }
}

/**
 * Display success message if it exists in session
 * 
 * @param bool $clear Whether to clear the message after displaying
 * @return string HTML for success message or empty string if no message
 */
function displaySuccess($clear = true) {
    if (isset($_SESSION['success_message'])) {
        $message = htmlspecialchars($_SESSION['success_message']);
        $time = isset($_SESSION['success_time']) ? htmlspecialchars($_SESSION['success_time']) : '';
        
        if ($clear) {
            unset($_SESSION['success_message']);
            unset($_SESSION['success_time']);
        }
        
        $html = "<div class='alert alert-success' role='alert'>";
        $html .= "<i class='fas fa-check-circle me-2'></i> $message";
        
        if (!empty($time)) {
            $html .= "<br><small>Time: $time</small>";
        }
        
        $html .= "</div>";
        
        return $html;
    }
    return "";
}
?>


Dashboard\footer.php
<?php
// footer.php

echo '
<style>
    /* Target styles specifically to the footer with the ID */
    #my-unique-footer {
        background-color: #f0f0f0;
        padding: 1rem;
        text-align: center;
        font-size: 0.9rem;
        color: #333;
        border-top: 1px solid #ddd;
        width: 100%; /* Ensure footer spans full width */
    }

    /*  Loader styles */
    #loader-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        transition: opacity 0.3s ease;
        opacity: 1;
        pointer-events: auto;
    }

    #loader-wrapper.hidden {
        opacity: 0;
        pointer-events: none;
    }

    .loader {
        border: 8px solid #f3f3f3;
        border-top: 8px solid #3498db;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<footer id="my-unique-footer">
    <small>
        ¬© <span id="copyright-year"></span> Presence. All Rights Reserved.
    </small>
</footer>

<div id="loader-wrapper">
    <div class="loader"></div>
</div>

<script>
    document.getElementById("copyright-year").textContent = new Date().getFullYear();

    document.addEventListener("DOMContentLoaded", () => {
        const loader = document.getElementById("loader-wrapper");
        if (loader) {
            loader.classList.add("hidden");
            loader.addEventListener("transitionend", () => {
                loader.remove();
            });
        }
    });
</script>
';
?>

Dashboard\header.php
<?php
// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Define base path if not already defined (good practice for consistency)
defined('BASE_PATH') or define('BASE_PATH', dirname(__DIR__, 1) . '/'); // Goes up two levels

// Include language switcher function
require_once BASE_PATH . 'includes/language_switcher.php';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title><?php echo isset($pageTitle) ? htmlspecialchars($pageTitle) : "Dashboard"; ?></title>
    <meta name="description" content="<?php echo isset($pageDescription) ? htmlspecialchars($pageDescription) : "Dashboard for presence and time management"; ?>">

    <!-- Styles -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/modern-normalize@3.0.1/modern-normalize.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/assets/css/header_styles.css">
    <link rel="icon" type="image/png" href="<?php echo BASE_PATH; ?>favicon.png">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg">
            <div class="container">
                <!-- Logo and Brand -->
                <a class="navbar-brand" href="<?php echo BASE_PATH; ?>index.php">
                    <img src="<?php echo BASE_PATH; ?>assets/images/logo.png" alt="ASB Logo" height="40" class="d-inline-block align-text-top logo-spin">
                    <span class="brand-text">ASB</span>
                </a>

                <!-- Toggler for mobile view -->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <!-- Navigation Links -->
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link <?php echo basename($_SERVER['PHP_SELF']) === '/index.php' ? 'active' : ''; ?>" href="/index.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Einchecken' : 'Check In'; ?></a>
                        </li>
                        <?php if (isset($_SESSION['is_admin']) && $_SESSION['is_admin'] === 1): ?>
                            <li class="nav-item">
                                <a class="nav-link <?php echo basename($_SERVER['PHP_SELF']) === '/time_settings.php' ? 'active' : ''; ?>" href="/time_settings.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Zeiteinstellungen' : 'Time Settings'; ?></a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link <?php echo basename($_SERVER['PHP_SELF']) === '/isheretoday.php' ? 'active' : ''; ?>" href="/isheretoday.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Eingecheckte Benutzer' : 'Checked In Users'; ?></a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link <?php echo basename($_SERVER['PHP_SELF']) === '/admin_users.php' ? 'active' : ''; ?>" href="/authSystem/admin_users.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Admin-Bereich' : 'Admin Center'; ?></a>
                            </li>
                        <?php endif; ?>
                    </ul>

                    <!-- User Navigation Links -->
                    <ul class="navbar-nav ms-auto">
                        <?php if (isset($_SESSION['username'])): ?>
                            <li class="nav-item">
                                <span class="nav-link welcome-text">
                                    <?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Willkommen, ' : 'Welcome, '; ?><?php echo htmlspecialchars($_SESSION['username']); ?>
                                </span>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="<?php echo BASE_PATH; ?>authSystem/logout.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Abmelden' : 'Logout'; ?></a>
                            </li>
                        <?php else: ?>
                            <li class="nav-item">
                                <a class="nav-link <?php echo basename($_SERVER['PHP_SELF']) === 'login.php' ? 'active' : ''; ?>" href="<?php echo BASE_PATH; ?>authSystem/login.php"><?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Anmelden' : 'Login'; ?></a>
                            </li>
                        <?php endif; ?>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <?php echo (isset($_SESSION['lang']) && $_SESSION['lang'] === 'de') ? 'Deutsch' : 'English'; ?>
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="languageDropdown">
                                <li><a class="dropdown-item" href="?lang=en">English</a></li>
                                <li><a class="dropdown-item" href="?lang=de">Deutsch</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <main>
        <!-- Main content goes here -->


Dashboard\time_range.php
<?php
/**
 * Time Range Handler
 * 
 * Determines if the current time is within the allowed range for check-ins.
 * Uses database settings for flexible configuration.
 */

// Ensure we have database connection
if (!isset($conn) || !$conn instanceof mysqli) {
    die("Database connection not available. Please include config.php before time_range.php");
}

// Get current day of week (0 = Sunday, 6 = Saturday) and time
$currentDayOfWeek = date('w');
$currentTime = date('H:i:s');
$currentDayName = date('l');

// Initialize default values
$startTime = '08:00:00';
$endTime = '18:00:00';
$isInRange = false;
$isClosed = false;

try {
    // Fetch time settings for today with optimized query
    $sql = "
        SELECT 
            day_name,
            start_time, 
            end_time,
            -- Check if start and end times indicate a closed day (both 00:00:00)
            (start_time = '00:00:00' AND end_time = '00:00:00') AS is_closed,
            -- Check if current time is within range
            (? BETWEEN start_time AND end_time) AS is_in_range
        FROM timesettings 
        WHERE day_id = ? 
        LIMIT 1
    ";

    $stmt = $conn->prepare($sql);
    if (!$stmt) {
        throw new Exception("Failed to prepare time settings query: " . $conn->error);
    }
    
    $stmt->bind_param("si", $currentTime, $currentDayOfWeek);
    if (!$stmt->execute()) {
        throw new Exception("Failed to execute time settings query: " . $stmt->error);
    }
    
    $result = $stmt->get_result();
    
    if ($result && $row = $result->fetch_assoc()) {
        $startTime = $row['start_time'];
        $endTime = $row['end_time'];
        $isClosed = (bool)$row['is_closed'];
        $isInRange = !$isClosed && (bool)$row['is_in_range'];
        $dayName = $row['day_name'];
    } else {
        // Log if no settings found
        error_log("No time settings found for day {$currentDayOfWeek}. Using defaults.");
    }
    
    $stmt->close();
} catch (Exception $e) {
    // Log the error but continue with defaults
    error_log("Time range error: " . $e->getMessage());
    
    // Default values are already set above
    $isInRange = ($currentTime >= $startTime && $currentTime <= $endTime);
}

// Make the time range info available for other scripts
$timeRangeInfo = [
    'day_id' => $currentDayOfWeek,
    'day_name' => $currentDayName,
    'start_time' => $startTime,
    'end_time' => $endTime,
    'current_time' => $currentTime,
    'is_in_range' => $isInRange,
    'is_closed' => $isClosed
];

// Helper function to format times for display
function formatTimeRange($startTime, $endTime, $isClosed = false) {
    if ($isClosed) {
        return "Closed";
    }
    return substr($startTime, 0, 5) . ' - ' . substr($endTime, 0, 5);
}

// Determine whether the submit button should be enabled
$disableSubmit = !$isInRange || $isClosed;
?>


includes\language_switcher.php
<?php
// includes/language_switcher.php

// Set default language
if (!isset($_SESSION['lang'])) {
    $_SESSION['lang'] = 'en';
}

// Check for language parameter in URL
if (isset($_GET['lang']) && in_array($_GET['lang'], ['en', 'de'])) {
    $_SESSION['lang'] = $_GET['lang'];
}

// Define language file path
$langFile = 'languages/' . $_SESSION['lang'] . '.php';

// Include language file, fallback to English if not found
if (file_exists($langFile)) {
    $translations = include $langFile;
} else {
    $translations = include 'languages/en.php';
}

// Function to handle language switching
function displayLanguageSwitcher() {
    global $translations;
    $currentLang = $_SESSION['lang'];
    $otherLang = ($currentLang === 'en') ? 'de' : 'en';
    $currentLangName = ($currentLang === 'en') ? 'English' : 'Deutsch';
    $otherLangName = ($otherLang === 'en') ? 'English' : 'Deutsch';

    echo "<li class='nav-item dropdown'>";
    echo "<a class='nav-link dropdown-toggle' href='#' id='languageDropdown' role='button' data-bs-toggle='dropdown' aria-expanded='false'>";
    echo $currentLangName;
    echo "</a>";
    echo "<ul class='dropdown-menu' aria-labelledby='languageDropdown'>";
    echo "<li><a class='dropdown-item' href='?lang=$otherLang'>$otherLangName</a></li>";
    echo "</ul>";
    echo "</li>";
}
?>


includes\Translation.php
<?php
class Translation {
    private $translations = [];
    private $lang = 'en';
    private $availableLanguages = ['en', 'de'];
    private $fallbackLang = 'en';

    public function __construct($lang = null) {
        $this->setLanguage($lang)->loadTranslations();
    }

    public function setLanguage($lang = null) {
        if ($lang && in_array($lang, $this->availableLanguages)) {
            $this->lang = $lang;
            if (session_status() === PHP_SESSION_ACTIVE) {
                $_SESSION['lang'] = $lang;
            }
        } elseif (session_status() === PHP_SESSION_ACTIVE && isset($_SESSION['lang']) && in_array($_SESSION['lang'], $this->availableLanguages)) {
            $this->lang = $_SESSION['lang'];
        }
        return $this;
    }

    public function loadTranslations() {
        $langFile = dirname(__DIR__) . "/languages/{$this->lang}.php";
        if (file_exists($langFile)) {
            $this->translations = include $langFile;
        } else {
            $langFile = dirname(__DIR__) . "/languages/{$this->fallbackLang}.php";
            $this->translations = include $langFile;
        }
        return $this;
    }

    public function get($key, $replacements = []) {
        $translation = isset($this->translations[$key]) ? $this->translations[$key] : $key;
        foreach ($replacements as $k => $v) {
            $translation = str_replace("{{$k}}", $v, $translation);
        }
        return $translation;
    }

    public function getCurrentLanguage() {
        return $this->lang;
    }
    
    public function renderLanguageSwitcher() {
        $currentLang = $this->lang;
        $currentPage = htmlspecialchars($_SERVER['PHP_SELF']);
        $queryString = $_SERVER['QUERY_STRING'];
        
        // Remove existing lang parameter if it exists
        $queryString = preg_replace('/(&|\?)lang=[^&]*/', '', $queryString);
        $queryConnector = empty($queryString) ? '?' : '&';
        
        $html = '<li class="nav-item dropdown">';
        $html .= '<a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">';
        $html .= ($currentLang === 'en') ? 'English' : 'Deutsch';
        $html .= '</a>';
        $html .= '<ul class="dropdown-menu" aria-labelledby="languageDropdown">';
        
        foreach ($this->availableLanguages as $lang) {
            if ($lang !== $currentLang) {
                $langName = ($lang === 'en') ? 'English' : 'Deutsch';
                $html .= '<li><a class="dropdown-item" href="' . $currentPage;
                if (!empty($queryString)) {
                    $html .= '?' . $queryString . $queryConnector . 'lang=' . $lang;
                } else {
                    $html .= '?lang=' . $lang;
                }
                $html .= '">' . $langName . '</a></li>';
            }
        }
        
        $html .= '</ul></li>';
        return $html;
    }
}
?>


languages\de.php
<?php
return [
    // General
    'dashboard' => 'Anwesenheits-Dashboard',
    'welcome_message' => 'Willkommen beim Anwesenheitssystem. Bitte melden Sie sich f√ºr heute an.',
    'name' => 'Name',
    'submit' => 'Einchecken',
    'enter_your_name' => 'Geben Sie Ihren vollst√§ndigen Namen ein',
    'name_validation_title' => 'Der Name muss 2-50 Zeichen lang sein und darf nur Buchstaben und Leerzeichen enthalten',
    
    // Messages
    'already_checked_in' => '{name} hat sich heute bereits angemeldet!',
    'check_in_allowed' => 'Check-in ist derzeit erlaubt (Stunden: {0} - {1})',
    'check_in_not_allowed' => 'Check-in ist derzeit nicht erlaubt (Stunden: {0} - {1})',
    'recent_check_ins' => 'Letzte Anmeldungen',
    'view_all_check_ins' => 'Alle Anmeldungen anzeigen',
    'check_in_form' => 'T√§gliche Anmeldung',
    
    // Errors
    'error_invalid_name' => 'Ung√ºltiges Namensformat. Bitte verwenden Sie nur Buchstaben und Leerzeichen.',
    'error_db_connection' => 'Datenbankverbindungsfehler. Bitte versuchen Sie es sp√§ter erneut.',
    'error_time_range' => 'Check-in ist zu diesem Zeitpunkt nicht erlaubt.',
    'system_error' => 'Ein Systemfehler ist aufgetreten. Bitte versuchen Sie es sp√§ter erneut.',
    'invalid_csrf' => 'Ung√ºltige Anforderung. Bitte laden Sie die Seite neu und versuchen Sie es erneut.',
    
    // Status
    'status_present' => 'Anwesend',
    'status_not_present' => 'Nicht anwesend',
    
    // Time Settings
    'time_settings_title' => 'Anmeldezeit-Limits konfigurieren',
    'time_settings_description' => 'Legen Sie Anmeldezeitbeschr√§nkungen f√ºr jeden Wochentag fest.',
    'time_settings_save_success' => 'Zeiteinstellungen erfolgreich aktualisiert!',
    'time_settings_no_changes' => 'Keine √Ñnderungen erkannt.',
    'time_settings_save_error' => 'Fehler beim Aktualisieren der Zeiteinstellungen.',
    'time_settings_current_time' => 'Aktuelle Zeit: ',
    'time_settings_system_active' => 'System ist AKTIV',
    'time_settings_system_inactive' => 'System ist INAKTIV',
    'time_settings_today_is' => 'Heute ist',
    'time_settings_mark_as_closed' => 'Als geschlossen markieren',
    'time_settings_closed_desc' => '(Keine Anmeldungen werden erlaubt)',
    'time_settings_start_time' => 'Startzeit',
    'time_settings_end_time' => 'Endzeit',
    'time_settings_reset' => 'Zur√ºcksetzen',
    'time_settings_save_changes' => '√Ñnderungen speichern',
    'time_settings_day_closed' => '{day} wurde als geschlossen markiert.',
    'time_settings_invalid_time' => 'Ung√ºltiges Zeitformat angegeben.',
    'time_settings_end_time_error' => 'Endzeit muss nach der Startzeit f√ºr {day} liegen.',
    'time_settings_time_settings' => 'Zeiteinstellungen',
    'is_open' => 'ist ge√∂ffnet',
    
    // Days of the week
    'day_sunday' => 'Sonntag',
    'day_monday' => 'Montag',
    'day_tuesday' => 'Dienstag',
    'day_wednesday' => 'Mittwoch',
    'day_thursday' => 'Donnerstag',
    'day_friday' => 'Freitag',
    'day_saturday' => 'Samstag',
    'today' => 'Heute',
    
    // Success page
    'success_checked_in' => 'Erfolgreich f√ºr heute eingecheckt!',
    'success_thank_you' => 'Vielen Dank, {name}! Sie werden in K√ºrze weitergeleitet.',
    'success_redirect' => 'Sie werden in K√ºrze zur Startseite weitergeleitet.',
    'go_back_now' => 'Jetzt zur√ºckgehen',
    
    // Already checked in page
    'already_checked_in_title' => 'Sie haben sich heute bereits angemeldet!',
    'already_checked_in_message' => 'Sie werden in K√ºrze zur Startseite weitergeleitet.',
    
    // Is here today page
    'presence_title' => 'Anwesenheit',
    'presence_welcome' => 'Willkommen beim Anwesenheitssystem. Hier k√∂nnen Sie sehen, wer heute anwesend ist.',
    'todays_signins' => 'Heutige Anmeldungen',
    'name_header' => 'Name',
    'status_header' => 'Status',
    'time_header' => 'Zeit',
    'no_signins_today' => 'Heute keine Anmeldungen.',
    
    // Authentication
    'login_title' => 'Anmelden',
    'login_button' => 'Anmelden',
    'username_label' => 'Benutzername',
    'password_label' => 'Passwort',
    'logout' => 'Abmelden',
    'welcome_user' => 'Willkommen, {username}',
    'admin_center' => 'Admin-Bereich',
    'invalid_credentials' => 'Ung√ºltige Anmeldeinformationen.',
    'user_not_found' => 'Benutzer nicht gefunden.',
    'session_expired' => 'Ihre Sitzung ist abgelaufen. Bitte melden Sie sich erneut an.',
    'session_invalid' => 'Ihre Sitzung ist ung√ºltig. Bitte melden Sie sich erneut an.',
    'time_settings_nav' => 'Zeiteinstellungen',
    'checked_in_users_nav' => 'Eingecheckte Benutzer',
    'check_in_nav' => 'Einchecken',
    'username_and_password_required' => 'Benutzername und Passwort sind erforderlich.'
];
?>


languages\en.php
<?php
return [
    // General
    'dashboard' => 'Attendance Dashboard',
    'welcome_message' => 'Welcome to the attendance system. Please check in for today.',
    'name' => 'Name',
    'submit' => 'Check In',
    'enter_your_name' => 'Enter your full name',
    'name_validation_title' => 'Name must be 2-50 characters and contain only letters and spaces',
    
    // Messages
    'already_checked_in' => '{name} has already checked in today!',
    'check_in_allowed' => 'Check-in is currently allowed (Hours: {0} - {1})',
    'check_in_not_allowed' => 'Check-in is currently not allowed (Hours: {0} - {1})',
    'recent_check_ins' => 'Recent Check-ins',
    'view_all_check_ins' => 'View All Check-ins',
    'check_in_form' => 'Daily Check-in',
    
    // Errors
    'error_invalid_name' => 'Invalid name format. Please use only letters and spaces.',
    'error_db_connection' => 'Database connection error. Please try again later.',
    'error_time_range' => 'Check-in is not allowed at this time.',
    'system_error' => 'A system error has occurred. Please try again later.',
    'invalid_csrf' => 'Invalid request. Please refresh the page and try again.',
    
    // Status
    'status_present' => 'Present',
    'status_not_present' => 'Not Present',
    
    // Time Settings
    'time_settings_title' => 'Configure Login Time Limits',
    'time_settings_description' => 'Set login time restrictions for each day of the week.',
    'time_settings_save_success' => 'Time settings updated successfully!',
    'time_settings_no_changes' => 'No changes detected.',
    'time_settings_save_error' => 'Error updating time settings.',
    'time_settings_current_time' => 'Current time: ',
    'time_settings_system_active' => 'System is ACTIVE',
    'time_settings_system_inactive' => 'System is INACTIVE',
    'time_settings_today_is' => 'Today is',
    'time_settings_mark_as_closed' => 'Mark as Closed',
    'time_settings_closed_desc' => '(No check-ins will be allowed)',
    'time_settings_start_time' => 'Start Time',
    'time_settings_end_time' => 'End Time',
    'time_settings_reset' => 'Reset',
    'time_settings_save_changes' => 'Save Changes',
    'time_settings_day_closed' => '{day} has been marked as closed.',
    'time_settings_invalid_time' => 'Invalid time format provided.',
    'time_settings_end_time_error' => 'End time must be later than start time for {day}.',
    'time_settings_time_settings' => 'Time Settings',
    'is_open' => 'is open',
    
    // Days of the week
    'day_sunday' => 'Sunday',
    'day_monday' => 'Monday',
    'day_tuesday' => 'Tuesday',
    'day_wednesday' => 'Wednesday',
    'day_thursday' => 'Thursday',
    'day_friday' => 'Friday',
    'day_saturday' => 'Saturday',
    'today' => 'Today',
    
    // Success page
    'success_checked_in' => 'Successfully checked in for today!',
    'success_thank_you' => 'Thank you, {name}! You will be redirected shortly.',
    'success_redirect' => 'You will be redirected to the home page shortly.',
    'go_back_now' => 'Go Back Now',
    
    // Already checked in page
    'already_checked_in_title' => 'You have already checked in today!',
    'already_checked_in_message' => 'You will be redirected to the home page shortly.',
    
    // Is here today page
    'presence_title' => 'Presence',
    'presence_welcome' => 'Welcome to the presence system. Here you can see who is present today.',
    'todays_signins' => 'Today\'s Sign-ins',
    'name_header' => 'Name',
    'status_header' => 'Status',
    'time_header' => 'Time',
    'no_signins_today' => 'No sign-ins today.',
    
    // Authentication
    'login_title' => 'Login',
    'login_button' => 'Login',
    'username_label' => 'Username',
    'password_label' => 'Password',
    'logout' => 'Logout',
    'welcome_user' => 'Welcome, {username}',
    'admin_center' => 'Admin Center',
    'invalid_credentials' => 'Invalid credentials.',
    'user_not_found' => 'User not found.',
    'session_expired' => 'Your session has expired. Please log in again.',
    'session_invalid' => 'Your session is invalid. Please log in again.',
    'time_settings_nav' => 'Time Settings',
    'checked_in_users_nav' => 'Checked In Users',
    'check_in_nav' => 'Check In',
    'username_and_password_required' => 'Username and password are required.'
];
?>


Old\old_dashboard.php
<?php
// Purpose: Main dashboard for user presence submission.
session_start();

require 'Dashboard/config.php';
require_once 'Dashboard/error_handler.php'; // Use centralized error handling

$today = date('Y-m-d');
$alreadyLoggedIn = false;
$userName = '';

try {
    // Check if this specific user has logged in today
    $stmt = $conn->prepare("SELECT name FROM presencetable WHERE date = ?");
    if (!$stmt) {
        throw new Exception("Prepare failed: " . $conn->error);
    }
    $stmt->bind_param("s", $today);
    if (!$stmt->execute()) {
        throw new Exception("Execute failed: " . $stmt->error);
    }
    $result = $stmt->get_result();

    // Check if any rows were returned
    if ($row = $result->fetch_assoc()) {
        $userName = $row["name"];
        $alreadyLoggedIn = true;
    }
    $stmt->close();

} catch (Exception $e) {
    handleError("Database Error", $e->getMessage(), null, true);
}

// Disable submit button if already logged in
$disabled = $alreadyLoggedIn ? 'disabled' : '';

// Include header
include 'Dashboard/header.php';
?>

<div class="container my-4">
    <div class="row">
        <div class="col-lg-12">
            <div class="welcome-section mb-4 text-center">
                <h1 class="display-4">Dashboard</h1>
                <p class="lead">Welcome to the dashboard. Here you can submit your presence.</p>
            </div>
        </div>
        <div class="col-lg-12">
            <?php echo displayError(); // Display any errors from the session ?>

            <?php if ($alreadyLoggedIn): ?>
                <div class="alert alert-success text-center" role="alert">
                    Hello <?php echo htmlspecialchars($userName); ?>, you have already checked in for today.
                </div>
            <?php else: ?>
                <div class="presence-form mx-auto" style="max-width: 400px;">
                    <form action="presence_request.php" method="POST">
                        <div class="mb-3">
                            <label for="formGroupExampleInput" class="form-label">Name</label>
                            <input type="text"
                                   class="form-control"
                                   id="formGroupExampleInput"
                                   name="fname"
                                   placeholder="Enter your name"
                                   value="<?php echo htmlspecialchars($userName); ?>"
                                   required
                                   pattern="[A-Za-z ]{2,50}"
                                   title="Name must be 2-50 characters and contain only letters and spaces">
                        </div>
                        <button type="submit" class="btn btn-primary w-100" style="background-color: #d40612; border-color: #d40612;" <?= $disabled; ?>>Submit</button>
                    </form>
                </div>
            <?php endif; ?>
        </div>
    </div>
</div>

<?php
include 'AI.php';
include 'Dashboard/footer.php';
?>



Old\translate.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Translate</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Load Bootstrap and a custom Google Font -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">

    <style>
        body,
        .translator-container,
        #google_translate_element {
            font-family: 'Roboto', sans-serif;
        }
        .translator-container {
            max-width: 400px;
            margin: 50px auto;
            text-align: center;
            padding: 20px;
            border: 1px solid #eee;
            box-shadow: 0 0 10px rgba(0,0,0,.1);
            background-color: #fff;
            border-radius: 8px;
        }
        /* Styling the default translate button */
        #google_translate_element .goog-te-gadget-simple {
            border: 1px solid #ccc;
            background: #f0f0f0 !important;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        #google_translate_element .goog-te-gadget-simple:hover {
            background-color: #e0e0e0 !important;
        }
        /* Hide Google Translate's top banner and menu frame */
        .goog-te-banner-frame.skiptranslate,
        .goog-te-menu-frame.skiptranslate {
            display: none !important;
        }
    </style>

    <script>
        function googleTranslateElementInit() {
            new google.translate.TranslateElement({
                pageLanguage: 'en',
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                autoDisplay: false
            }, 'google_translate_element');
        }
    </script>
    <script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
</head>
<body>
    <div class="translator-container">
        <div id="google_translate_element"></div>
    </div>
</body>
</html>

Old\samples\asterisk.adsi
;
; Asterisk default ADSI script
;
;
; Begin with the preamble requirements
;
DESCRIPTION "Asterisk PBX"		; Name of vendor
VERSION 0x00						; Version of stuff
;SECURITY "_AST"					; Security code
SECURITY 0X9BDBF7AC				; Security code
FDN 0x0000000F						; Descriptor number

;
; Flags
;
FLAG "nocallwaiting"

;
; Predefined strings
;
DISPLAY "titles" IS "** Asterisk PBX **"
DISPLAY "talkingto" IS "Call active." JUSTIFY LEFT
DISPLAY "callname" IS "$Call1p" JUSTIFY LEFT
DISPLAY "callnum" IS "$Call1s" JUSTIFY LEFT
DISPLAY "incoming" IS "Incoming call!" JUSTIFY LEFT
DISPLAY "ringing" IS "Calling... " JUSTIFY LEFT
DISPLAY "callended" IS "Call ended." JUSTIFY LEFT
DISPLAY "missedcall" IS "Missed call." JUSTIFY LEFT
DISPLAY "busy" IS "Busy." JUSTIFY LEFT
DISPLAY "reorder" IS "Reorder." JUSTIFY LEFT
DISPLAY "cwdisabled" IS "Callwait disabled"
DISPLAY "empty" IS "asdf"

;
; Begin soft key definitions
;
KEY "callfwd" IS "CallFwd" OR "Call Forward"
	OFFHOOK
	VOICEMODE
	WAITDIALTONE
	SENDDTMF "*60"
	GOTO "offHook"
ENDKEY

KEY "vmail_OH" IS "VMail" OR "Voicemail"
	OFFHOOK
	VOICEMODE
	WAITDIALTONE
	SENDDTMF "8500"
ENDKEY

KEY "vmail" IS "VMail" OR "Voicemail"
	SENDDTMF "8500"
ENDKEY

KEY "backspace" IS "BackSpc" OR "Backspace"
	BACKSPACE
ENDKEY

KEY "cwdisable" IS "CWDsble" OR "Disable Call Wait"
	SENDDTMF "*70"
	SETFLAG "nocallwaiting"
	SHOWDISPLAY "cwdisabled" AT 4
	TIMERCLEAR
	TIMERSTART 1
ENDKEY

KEY "cidblock" IS "CIDBlk" OR "Block Callerid"
	SENDDTMF "*67"
	SETFLAG "nocallwaiting"
ENDKEY

;
; Begin main subroutine
;

SUB "main" IS
	IFEVENT NEARANSWER THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1 NOUPDATE
		SHOWDISPLAY "talkingto" AT 2 NOUPDATE
		SHOWDISPLAY "callname" AT 3
		SHOWDISPLAY "callnum" AT 4
		GOTO "stableCall"
	ENDIF
	IFEVENT OFFHOOK THEN
		CLEAR
		CLEARFLAG "nocallwaiting"
		CLEARDISPLAY
		SHOWDISPLAY "titles" AT 1
		SHOWKEYS "vmail"
		SHOWKEYS "cidblock"
		SHOWKEYS "cwdisable" UNLESS "nocallwaiting"
		GOTO "offHook"
	ENDIF
	IFEVENT IDLE THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1
		SHOWKEYS "vmail_OH"
	ENDIF
	IFEVENT CALLERID THEN
		CLEAR
;		SHOWDISPLAY "titles" AT 1 NOUPDATE
;		SHOWDISPLAY "incoming" AT 2 NOUPDATE
		SHOWDISPLAY "callname" AT 3 NOUPDATE
		SHOWDISPLAY "callnum" AT 4
	ENDIF
	IFEVENT RING THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1 NOUPDATE
		SHOWDISPLAY "incoming" AT 2
	ENDIF
	IFEVENT ENDOFRING THEN
		SHOWDISPLAY "missedcall" AT 2
		CLEAR
		SHOWDISPLAY "titles" AT 1
		SHOWKEYS "vmail_OH"
	ENDIF
	IFEVENT TIMER THEN
		CLEAR
		SHOWDISPLAY "empty" AT 4
	ENDIF
ENDSUB

SUB "offHook" IS
	IFEVENT FARRING THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1 NOUPDATE
		SHOWDISPLAY "ringing" AT 2 NOUPDATE
		SHOWDISPLAY "callname" at 3 NOUPDATE
		SHOWDISPLAY "callnum" at 4
	ENDIF
	IFEVENT FARANSWER THEN
		CLEAR
		SHOWDISPLAY "talkingto" AT 2
		GOTO "stableCall"
	ENDIF
	IFEVENT BUSY THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1 NOUPDATE
		SHOWDISPLAY "busy" AT 2 NOUPDATE
		SHOWDISPLAY "callname" at 3 NOUPDATE
		SHOWDISPLAY "callnum" at 4
	ENDIF
	IFEVENT REORDER THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1 NOUPDATE
		SHOWDISPLAY "reorder" AT 2 NOUPDATE
		SHOWDISPLAY "callname" at 3 NOUPDATE
		SHOWDISPLAY "callnum" at 4
	ENDIF
ENDSUB

SUB "stableCall" IS
	IFEVENT REORDER THEN
		SHOWDISPLAY "callended" AT 2
	ENDIF
ENDSUB


Old\samples\extensions.ael
//
// Example AEL config file
//
//
// Static extension configuration file, used by
// the pbx_ael module. This is where you configure all your
// inbound and outbound calls in Asterisk.
//
// This configuration file is reloaded
// - With the "ael reload" command in the CLI
// - With the "reload" command (that reloads everything) in the CLI

// The "Globals" category contains global variables that can be referenced
// in the dialplan by using the GLOBAL dialplan function:
//  ${GLOBAL(VARIABLE)}
// ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
// Unix/Linux environmental variables are reached with the ENV dialplan
// function: ${ENV(VARIABLE)}
//

// NOTE! NOTE! NOTE!
// Asterisk by default will load both extensions.conf and extensions.ael files.
// Upon loading these files the dialplans generated from both with be merged,
// so you must make sure that you don't have any overlapping contexts or global
// variables. If you do, then unexpected behavior may result when the data is
// merged.
// NOTE! NOTE! NOTE!

globals {
	CONSOLE-AEL="Console/dsp"; 		// Console interface for demo
	//CONSOLE-AEL=Zap/1;
	//CONSOLE-AEL=Phone/phone0;
	OUTBOUND-TRUNK="Zap/g2";		// Trunk interface
	//
	// Note the 'g2' in the OUTBOUND-TRUNK variable above. It specifies which group (defined
	// in chan_dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use in
	// the specified group. The four possible options are:
	//
	// g: select the lowest-numbered non-busy DAHDI channel
	//    (aka. ascending sequential hunt group).
	// G: select the highest-numbered non-busy DAHDI channel
	//    (aka. descending sequential hunt group).
	// r: use a round-robin search, starting at the next highest channel than last
	//    time (aka. ascending rotary hunt group).
	// R: use a round-robin search, starting at the next lowest channel than last
	//    time (aka. descending rotary hunt group).
	//
	OUTBOUND-TRUNKMSD=1;					// MSD digits to strip (usually 1 or 0)
	//OUTBOUND-TRUNK2=IAX2/user:pass@provider;
};

//
// Any category other than "General" and "Globals" represent
// extension contexts, which are collections of extensions.
//
// Extension names may be numbers, letters, or combinations
// thereof. If an extension name is prefixed by a '_'
// character, it is interpreted as a pattern rather than a
// literal.  In patterns, some characters have special meanings:
//
//   X - any digit from 0-9
//   Z - any digit from 1-9
//   N - any digit from 2-9
//   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
//   . - wildcard, matches anything remaining (e.g. _9011. matches
//	anything starting with 9011 excluding 9011 itself)
//   ! - wildcard, causes the matching process to complete as soon as
//       it can unambiguously determine that no other matches are possible
//
// For example the extension _NXXXXXX would match normal 7 digit dialings,
// while _1NXXNXXXXXX would represent an area code plus phone number
// preceded by a one.
//
// Each step of an extension is ordered by priority, which must
// always start with 1 to be considered a valid extension.  The priority
// "next" or "n" means the previous priority plus one, regardless of whether
// the previous priority was associated with the current extension or not.
// The priority "same" or "s" means the same as the previously specified
// priority, again regardless of whether the previous entry was for the
// same extension.  Priorities may be immediately followed by a plus sign
// and another integer to add that amount (most useful with 's' or 'n').
// Priorities may then also have an alias, or label, in
// parenthesis after their name which can be used in goto situations
//
// Contexts contain several lines, one for each step of each
// extension, which can take one of two forms as listed below,
// with the first form being preferred.  One may include another
// context in the current one as well, optionally with a
// date and time.  Included contexts are included in the order
// they are listed.
//
//context name {
//	exten-name => {
//		application(arg1,arg2,...);
//
// 	Timing list for includes is
//
//   <time range>|<days of week>|<days of month>|<months>
//
//	includes {
//		daytime|9:00-17:00|mon-fri|*|*;
//      };
//
// 	ignorepat can be used to instruct drivers to not cancel dialtone upon
// 	receipt of a particular pattern.  The most commonly used example is
// 	of course '9' like this:
//
//	ignorepat => 9;
//
// 	so that dialtone remains even after dialing a 9.
//};


//
// Sample entries for extensions.conf
//
//
context ael-dundi-e164-canonical {
	//
	// List canonical entries here
	//
	// 12564286000 => &ael-std-exten(6000,IAX2/foo);
	// _125642860XX => Dial(IAX2/otherbox/${EXTEN:7});
};

context ael-dundi-e164-customers {
	//
	// If you are an ITSP or Reseller, list your customers here.
	//
	//_12564286000 => Dial(SIP/customer1);
	//_12564286001 => Dial(IAX2/customer2);
};

context ael-dundi-e164-via-pstn {
	//
	// If you are freely delivering calls to the PSTN, list them here
	//
	//_1256428XXXX => Dial(DAHDI/G2/${EXTEN:7}); // Expose all of 256-428
	//_1256325XXXX => Dial(DAHDI/G2/${EXTEN:7}); // Ditto for 256-325
};

context ael-dundi-e164-local {
	//
	// Context to put your dundi IAX2 or SIP user in for
	// full access
	//
	includes {
	 ael-dundi-e164-canonical;
	 ael-dundi-e164-customers;
	 ael-dundi-e164-via-pstn;
	};
};

context ael-dundi-e164-switch {
	//
	// Just a wrapper for the switch
	//

	switches {
		DUNDi/e164;
	};
};

context ael-dundi-e164-lookup {
	//
	// Locally to lookup, try looking for a local E.164 solution
	// then try DUNDi if we don't have one.
	//
	includes {
		ael-dundi-e164-local;
		ael-dundi-e164-switch;
	};
	//
};

//
// DUNDi can also be implemented as a Macro instead of using
// the Local channel driver.
//
macro ael-dundi-e164(exten) {
//
// ARG1 is the extension to Dial
//
	goto ${exten}|1;
	return;
};

//
// The SWITCH statement permits a server to share the dialplan with
// another server. Use with care: Reciprocal switch statements are not
// allowed (e.g. both A -> B and B -> A), and the switched server needs
// to be on-line or else dialing can be severely delayed.
//
context ael-iaxprovider {
	switches {
	// IAX2/user:[key]@myserver/mycontext;
	};
};

context ael-trunkint {
	//
	// International long distance through trunk
	//
	includes {
		ael-dundi-e164-lookup;
	};
	_9011. => {
		&ael-dundi-e164(${EXTEN:4});
		Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	};
};

context ael-trunkld {
	//
	// Long distance context accessed through trunk
	//
	includes {
		ael-dundi-e164-lookup;
	};
	_91NXXNXXXXXX => {
		&ael-dundi-e164(${EXTEN:1});
		Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	};
};

context ael-trunklocal {
	//
	// Local seven-digit dialing accessed through trunk interface
	//
	_9NXXXXXX => {
		Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	};
};

context ael-trunktollfree {
	//
	// Long distance context accessed through trunk interface
	//

	_91800NXXXXXX => Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	_91888NXXXXXX => Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	_91877NXXXXXX => Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
	_91866NXXXXXX => Dial(${OUTBOUND-TRUNK}/${EXTEN:${OUTBOUND-TRUNKMSD}});
};

context ael-international {
	//
	// Master context for international long distance
	//
	ignorepat => 9;
	includes {
		ael-longdistance;
		ael-trunkint;
	};
};

context ael-longdistance {
	//
	// Master context for long distance
	//
	ignorepat => 9;
	includes {
		ael-local;
		ael-trunkld;
	};
};

context ael-local {
	//
	// Master context for local and toll-free calls only
	//
	ignorepat => 9;
	includes {
		ael-default;
		ael-trunklocal;
		ael-trunktollfree;
		ael-iaxprovider;
	};
};

//
// You can use an alternative switch type as well, to resolve
// extensions that are not known here, for example with remote
// IAX switching you transparently get access to the remote
// Asterisk PBX
//
// switch => IAX2/user:password@bigserver/local
//
// An "lswitch" is like a switch but is literal, in that
// variable substitution is not performed at load time
// but is passed to the switch directly (presumably to
// be substituted in the switch routine itself)
//
// lswitch => Loopback/12${EXTEN}@othercontext
//
// An "eswitch" is like a switch but the evaluation of
// variable substitution is performed at runtime before
// being passed to the switch routine.
//
// eswitch => IAX2/context@${CURSERVER}


macro ael-std-exten-ael( ext , dev ) {
        Dial(${dev}/${ext},20);
        switch(${DIALSTATUS}) {
        case BUSY:
                Voicemail(${ext},b);
                break;
        default:
                Voicemail(${ext},u);
        };
        catch a {
                VoiceMailMain(${ext});
                return;
        };
	return;
};

context ael-demo {
	s => {
		Wait(1);
		Answer();
		Set(TIMEOUT(digit)=5);
		Set(TIMEOUT(response)=10);
restart:
		Background(demo-congrats);
instructions:
		for (x=0; ${x} < 3; x=${x} + 1) {
			Background(demo-instruct);
			WaitExten();
		};
	};
	2 => {
		Background(demo-moreinfo);
		goto s|instructions;
	};
	3 => {
		Set(LANGUAGE()=fr);
		goto s|restart;
	};
	1000 => {
		goto ael-default|s|1;
	};
	500 => {
		Playback(demo-abouttotry);
		Dial(IAX2/guest@misery.digium.com/s@default);
		Playback(demo-nogo);
		goto s|instructions;
	};
	600 => {
		Playback(demo-echotest);
		Echo();
		Playback(demo-echodone);
		goto s|instructions;
	};
	_1234 => &ael-std-exten-ael(${EXTEN}, "IAX2");
	8500 => {
		VoicemailMain();
		goto s|instructions;
	};
	# => {
		Playback(demo-thanks);
		Hangup();
	};
	t => goto #|1;
	i => Playback(invalid);
};


//
// If you wish to use AEL for your default context, remove it
// from extensions.conf (or change its name or comment it out)
// and then uncomment the one here.
//

context ael-default {

// By default we include the demo.  In a production system, you
// probably don't want to have the demo there.

	includes {
		ael-demo;
	};
//
// Extensions like the two below can be used for FWD, Nikotel, sipgate etc.
// Note that you must have a [sipprovider] section in sip.conf whereas
// the otherprovider.net example does not require such a peer definition
//
//_41X. => Dial(SIP/${EXTEN:2}@sipprovider,,r);
//_42X. => Dial(SIP/user:passwd@${EXTEN:2}@otherprovider.net,30,rT);

// Real extensions would go here. Generally you want real extensions to be
// 4 or 5 digits long (although there is no such requirement) and start with a
// single digit that is fairly large (like 6 or 7) so that you have plenty of
// room to overlap extensions and menu options without conflict.  You can alias
// them with names, too, and use global variables

// 6245  => {
//		hint(SIP/Grandstream1&SIP/Xlite1,Joe Schmoe); // Channel hints for presence
// 		Dial(SIP/Grandstream1,20,rt);                 // permit transfer
//        Dial(${HINT}/5245},20,rtT);                    // Use hint as listed
//        switch(${DIALSTATUS}) {
//        case BUSY:
//                Voicemail(6245,b);
//				return;
//        default:
//                Voicemail(6245,u);
//				return;
//        };
//       };

// 6361 => Dial(IAX2/JaneDoe,,rm);                // ring without time limit
// 6389 => Dial(MGCP/aaln/1@192.168.0.14);
// 6394 => Dial(Local/6275/n);                    // this will dial ${MARK}

// 6275 => &ael-stdexten(6275,${MARK});           // assuming ${MARK} is something like DAHDI/2
// mark => goto 6275|1;                          // alias mark to 6275
// 6536 => &ael-stdexten(6236,${WIL});            // Ditto for wil
// wil  => goto 6236|1;
//
// Some other handy things are an extension for checking voicemail via
// voicemailmain
//
// 8500 => {
//			VoicemailMain();
//			Hangup();
//	       };
//
// Or a conference room (you'll need to edit meetme.conf to enable this room)
//
// 8600 => Meetme(1234);
//
// Or playing an announcement to the called party, as soon it answers
//
// 8700 => Dial(${MARK},30,A(/path/to/my/announcemsg))
//
// For more information on applications, just type "show applications" at your
// friendly Asterisk CLI prompt.
//
// 'show application <command>' will show details of how you
// use that particular application in this file, the dial plan.
//
}


Old\samples\extensions.lua


CONSOLE = "Console/dsp" -- Console interface for demo
--CONSOLE = "DAHDI/1"
--CONSOLE = "Phone/phone0"

TRUNK = "DAHDI/G2"
TRUNKMSD = 1
-- TRUNK = "IAX2/user:pass@provider"


--
-- Extensions are expected to be defined in a global table named 'extensions'.
-- The 'extensions' table should have a group of tables in it, each
-- representing a context.  Extensions are defined in each context.  See below
-- for examples.
--
-- Extension names may be numbers, letters, or combinations thereof. If
-- an extension name is prefixed by a '_' character, it is interpreted as
-- a pattern rather than a literal.  In patterns, some characters have
-- special meanings:
--
--   X - any digit from 0-9
--   Z - any digit from 1-9
--   N - any digit from 2-9
--   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
--   . - wildcard, matches anything remaining (e.g. _9011. matches
--       anything starting with 9011 excluding 9011 itself)
--   ! - wildcard, causes the matching process to complete as soon as
--       it can unambiguously determine that no other matches are possible
--
-- For example the extension _NXXXXXX would match normal 7 digit
-- dialings, while _1NXXNXXXXXX would represent an area code plus phone
-- number preceded by a one.
--
-- If your extension has special characters in it such as '.' and '!' you must
-- explicitly make it a string in the tabale definition:
--
--   ["_special."] = function;
--   ["_special!"] = function;
--
-- There are no priorities.  All extensions to asterisk appear to have a single
-- priority as if they consist of a single priority.
--
-- Each context is defined as a table in the extensions table.  The
-- context names should be strings.
--
-- One context may be included in another context using the 'includes'
-- extension.  This extension should be set to a table containing a list
-- of context names.  Do not put references to tables in the includes
-- table.
--
--   include = {"a", "b", "c"};
--
-- Channel variables can be accessed through the global 'channel' table.
--
--   v = channel.var_name
--   v = channel["var_name"]
--   v.value
--   v:get()
--
--   channel.var_name = "value"
--   channel["var_name"] = "value"
--   v:set("value")
--
--   channel.func_name(1,2,3):set("value")
--   value = channel.func_name(1,2,3):get()
--
--   channel["func_name(1,2,3)"]:set("value")
--   channel["func_name(1,2,3)"] = "value"
--   value = channel["func_name(1,2,3)"]:get()
--
-- Note the use of the ':' operator to access the get() and set()
-- methods.
--
-- Also notice the absence of the following constructs from the examples above:
--   channel.func_name(1,2,3) = "value"  -- this will NOT work
--   value = channel.func_name(1,2,3)    -- this will NOT work as expected
--
--
-- Dialplan applications can be accessed through the global 'app' table.
--
--    app.Dial("DAHDI/1")
--    app.dial("DAHDI/1")
--    app["dial"]("DAHDI/1")
--
-- More examples can be found below.
--
-- An autoservice is automatically run while lua code is executing.  The
-- autoservice can be stopped and restarted using the autoservice_stop() and
-- autoservice_start() functions.  The autservice should be running before
-- starting long running operations. The autoservice will automatically be
-- stopped before executing applications and dialplan functions and will be
-- restarted afterwards.  The autoservice_status() function can be used to
-- check the current status of the autoservice and will return true if an
-- autoservice is currently running.
--
-- Note about naming conflicts:
-- Lua allows you to refer to table entries using the '.' notation,
-- I.E. app.goto(something), only if the entry doesn't conflict with an Lua
-- reserved word.  In the 'goto' example, with Lua 5.1 or earlier, 'goto' is
-- not a reserved word so you'd be calling the Asterisk dialplan application
-- 'goto'.  Lua 5.2 however, introduced the 'goto' control statement which
-- makes 'goto' a reserved word.  This causes the interpreter to fail parsing
-- the file and pbx_lua.so will fail to load.  The same applies to any use of
-- Lua tables including extensions, channels and any tables you create.
--
-- There are two ways around this:  Since Lua is case-sensitive, you can use
-- capitalized names, I.E. app.Goto(something) to refer to the Asterisk apps,
-- functions, etc. Or you can use the full syntax, I.E. app["goto"](something).
-- Both syntaxes are backwards compatible with earlier Lua versions.  To make
-- your Lua dialplans easier to maintain and to reduce the chance of future
-- conflicts you may want to use the app["goto"](something) syntax for all
-- table accesses.
--

function outgoing_local(c, e)
	app.dial("DAHDI/1/" .. e, "", "")
end

function demo_instruct()
	app.background("demo-instruct")
	app.waitexten()
end

function demo_congrats()
	app.background("demo-congrats")
	demo_instruct()
end

-- Answer the chanel and play the demo sound files
function demo_start(context, exten)
	app.wait(1)
	app.answer()

	channel.TIMEOUT("digit"):set(5)
	channel.TIMEOUT("response"):set(10)
	-- app.set("TIMEOUT(digit)=5")
	-- app.set("TIMEOUT(response)=10")

	demo_congrats(context, exten)
end

function demo_hangup()
	app.playback("demo-thanks")
	app.hangup()
end

extensions = {
	demo = {
		s = demo_start;

		["2"] = function()
			app.background("demo-moreinfo")
			demo_instruct()
		end;
		["3"] = function ()
			channel.LANGUAGE():set("fr") -- set the language to french
			demo_congrats()
		end;

		["1000"] = function()
--	See the naming conflict note above.
			app['goto']("default", "s", 1)
		end;

		["1234"] = function()
			app.playback("transfer", "skip")
			-- do a dial here
		end;

		["1235"] = function()
			app.voicemail("1234", "u")
		end;

		["1236"] = function()
			app.dial("Console/dsp")
			app.voicemail(1234, "b")
		end;

		["#"] = demo_hangup;
		t = demo_hangup;
                i = function()
                        app.playback("invalid")
                        demo_instruct()
                end;

		["500"] = function()
			app.playback("demo-abouttotry")
			app.dial("IAX2/guest@misery.digium.com/s@default")
			app.playback("demo-nogo")
			demo_instruct()
		end;

		["600"] = function()
			app.playback("demo-echotest")
			app.echo()
			app.playback("demo-echodone")
			demo_instruct()
		end;

		["8500"] = function()
			app.voicemailmain()
			demo_instruct()
		end;

	};

	default = {
		-- by default, do the demo
		include = {"demo"};
	};

	public = {
		-- ATTENTION: If your Asterisk is connected to the internet and you do
		-- not have allowguest=no in sip.conf, everybody out there may use your
		-- public context without authentication.  In that case you want to
		-- double check which services you offer to the world.
		--
		include = {"demo"};
	};

	["local"] = {
		["_NXXXXXX"] = outgoing_local;
	};
}

hints = {
	demo = {
		[1000] = "SIP/1000";
		[1001] = "SIP/1001";
	};

	default = {
		["1234"] = "SIP/1234";
	};
}


Old\samples\ss7.timers
;;;;;	ITU-T Q.707 timers

;mtp3_timer.q707_t1 = 4000
;mtp3_timer.q707_t2 = 30000

;;;;;	MTP3 timers as specified in ITU-T Q.704 or ANSI T1.111-2001

mtp3_timer.t1 = 500
mtp3_timer.t2 = 700
mtp3_timer.t3 = 500
mtp3_timer.t4 = 500
mtp3_timer.t5 = 500
mtp3_timer.t6 = 500
mtp3_timer.t7 = 1000

mtp3_timer.t10 = 60000

mtp3_timer.t12 = 800
mtp3_timer.t13 = 800
mtp3_timer.t14 = 2000

;	enable for ITU only. Timers after T17 are defined differently for ANSI
;mtp3_timer.t19 = 67000
;mtp3_timer.t21 = 63000
;
;mtp3_timer.t22 = 300000
;mtp3_timer.t23 = 300000


;;;;;	ISUP timers as specified in ITU-T Q.764 or ANSI T1.113-2000

isup_timer.t1 = 15000
;isup_timer.t2 = 180000		; ITU only

;isup_timer.t5 = 300000		; for ITU
;isup_timer.t5 = 60000		; for ANSI
isup_timer.t6 = 30000
isup_timer.t7 = 20000
isup_timer.t8 = 10000

;isup_timer.t10 = 4000		; ITU only

isup_timer.t12 = 15000
;isup_timer.t13 = 300000	; for ITU
;isup_timer.t13 = 60000		; for ANSI
isup_timer.t14 = 15000
;isup_timer.t15 = 300000	; for ITU
;isup_timer.t15 = 60000		; for ANSI
isup_timer.t16 = 15000
;isup_timer.t17 = 300000	; for ITU
;isup_timer.t17 = 60000		; for ANSI
isup_timer.t18 = 15000
;isup_timer.t19 = 300000	; for ITU
;isup_timer.t19 = 60000		; for ANSI
isup_timer.t20 = 15000
;isup_timer.t21 = 300000	; for ITU
;isup_timer.t21 = 60000		; for ANSI
isup_timer.t22 = 15000
;isup_timer.t23 = 300000	; for ITU
;isup_timer.t23 = 60000		; for ANSI

isup_timer.t27 = 240000

isup_timer.t33 = 12000
;isup_timer.t35 = 15000		; ITU only


Old\samples\telcordia-1.adsi
;
; Asterisk default ADSI script
;
;
; Begin with the preamble requirements
;
DESCRIPTION "Telcordia Demo"		; Name of vendor
VERSION 0x02				; Version of stuff
;SECURITY "_AST"				; Security code
SECURITY 0x0000				; Security code
FDN 0x0000000f				; Descriptor number

;
; Predefined strings
;
DISPLAY "talkingto" IS "Talking To" "$Call1p" WRAP
DISPLAY "titles" IS "20th Century IQ Svc"
DISPLAY "newcall" IS "New Call From" "$Call1p" WRAP
DISPLAY "ringing" IS "Ringing"

;
; Begin state definitions
;
STATE "callup"		; Call is currently up
STATE "inactive"	; No active call

;
; Begin soft key definitions
;
KEY "CB_OH" IS "Block" OR "Call Block"
	OFFHOOK
	VOICEMODE
	WAITDIALTONE
	SENDDTMF "*60"
	SUBSCRIPT "offHook"
ENDKEY

KEY "CB" IS "Block" OR "Call Block"
	SENDDTMF "*60"
ENDKEY

;
; Begin main subroutine
;

SUB "main" IS
	IFEVENT NEARANSWER THEN
		CLEAR
		SHOWDISPLAY "talkingto" AT 1
		GOTO "stableCall"
	ENDIF
	IFEVENT OFFHOOK THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1
		SHOWKEYS "CB"
		GOTO "offHook"
	ENDIF
	IFEVENT IDLE THEN
		CLEAR
		SHOWDISPLAY "titles" AT 1
		SHOWKEYS "CB_OH"
	ENDIF
	IFEVENT CALLERID THEN
		CLEAR
		SHOWDISPLAY "newcall" AT 1
	ENDIF
ENDSUB

SUB "offHook" IS
	IFEVENT FARRING THEN
		CLEAR
		SHOWDISPLAY "ringing" AT 1
	ENDIF
	IFEVENT FARANSWER THEN
		CLEAR
		SHOWDISPLAY "talkingto" AT 1
		GOTO "stableCall"
	ENDIF
ENDSUB

SUB "stableCall" IS

ENDSUB


TimeSettings\setgettime.php
<?php
// Define the days array (Sunday = 0 ... Saturday = 6)
$days = array(
    0 => "Sunday",
    1 => "Monday",
    2 => "Tuesday",
    3 => "Wednesday",
    4 => "Thursday",
    5 => "Friday",
    6 => "Saturday"
);

// Define default times
define('DEFAULT_START_TIME', '08:00');
define('DEFAULT_END_TIME', '18:00');

// Process form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $affected_rows = 0;
    foreach ($days as $index => $dayName) {
        // Get the posted start and end times for this day
        $start = $_POST["start_time_{$index}"] ?? DEFAULT_START_TIME;
        $end   = $_POST["end_time_{$index}"] ?? DEFAULT_END_TIME;

        // Use UPDATE to modify existing rows
        $stmt = $conn->prepare("UPDATE timesettings SET start_time = ?, end_time = ? WHERE day_name = ?");
        $stmt->bind_param("sss", $start, $end, $dayName);
        $stmt->execute();
        if ($stmt->affected_rows > 0) {
            $affected_rows++;
        }
        $stmt->close();
    }
    if ($affected_rows > 0) {
        $message = "Settings saved successfully.";
    } else {
        $message = "No changes were made.";
    }
}

// Fetch current settings from the database
$settings = array();
$result = $conn->query("SELECT day_name, start_time, end_time FROM timesettings");
while ($row = $result->fetch_assoc()) {
    $settings[$row['day_name']] = array('start_time' => $row['start_time'], 'end_time' => $row['end_time']);
}
$result->free();
?>

Utilities\translate.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Translate</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Load Bootstrap and a custom Google Font -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">

    <style>
        body,
        .translator-container,
        #google_translate_element {
            font-family: 'Roboto', sans-serif;
        }
        .translator-container {
            max-width: 400px;
            margin: 50px auto;
            text-align: center;
            padding: 20px;
            border: 1px solid #eee;
            box-shadow: 0 0 10px rgba(0,0,0,.1);
            background-color: #fff;
            border-radius: 8px;
        }
        /* Styling the default translate button */
        #google_translate_element .goog-te-gadget-simple {
            border: 1px solid #ccc;
            background: #f0f0f0 !important;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        #google_translate_element .goog-te-gadget-simple:hover {
            background-color: #e0e0e0 !important;
        }
        /* Hide Google Translate's top banner and menu frame */
        .goog-te-banner-frame.skiptranslate,
        .goog-te-menu-frame.skiptranslate {
            display: none !important;
        }
    </style>

    <script>
        function googleTranslateElementInit() {
            new google.translate.TranslateElement({
                pageLanguage: 'en',
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                autoDisplay: false
            }, 'google_translate_element');
        }
    </script>
    <script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
</head>
<body>
    <div class="translator-container">
        <div id="google_translate_element"></div>
    </div>
</body>
</html>

